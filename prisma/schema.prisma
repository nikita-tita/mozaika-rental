generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  role          UserRole       @default(REALTOR)
  avatar        String?
  verified      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  clients       Client[]
  contracts     Contract[]
  deals         Deal[]
  notifications Notification[]
  payments      Payment[]
  properties    Property[]
  sessions      Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Property {
  id          String         @id @default(cuid())
  title       String
  description String?
  type        PropertyType
  status      PropertyStatus @default(AVAILABLE)
  address     String
  area        Float?
  bedrooms    Int?
  bathrooms   Int?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  features    String[]
  images      String[]
  price       Float
  userId      String
  deals       Deal[]
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("properties")
}

model Client {
  id         String     @id @default(cuid())
  firstName  String
  lastName   String
  email      String?
  phone      String
  notes      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userId     String
  address    String?
  birthDate  DateTime?
  city       String?
  inn        String?
  isActive   Boolean    @default(true)
  middleName String?
  passport   String?
  snils      String?
  source     String?
  type       ClientType @default(TENANT)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  deals      Deal[]

  @@map("clients")
}

model Deal {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      DealStatus @default(NEW)
  amount      Float?
  startDate   DateTime?
  endDate     DateTime?
  userId      String
  clientId    String?
  propertyId  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  client      Client?    @relation(fields: [clientId], references: [id])
  property    Property?  @relation(fields: [propertyId], references: [id])
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("deals")
}

model Contract {
  id        String         @id @default(cuid())
  status    ContractStatus @default(DRAFT)
  signedAt  DateTime?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  content   String
  dealId    String?
  expiresAt DateTime?
  title     String
  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contracts")
}

model Payment {
  id        String        @id @default(cuid())
  type      PaymentType
  status    PaymentStatus @default(PENDING)
  amount    Float
  userId    String
  dueDate   DateTime?
  paidAt    DateTime?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  dealId    String?
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  userId    String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  type      NotificationType
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum UserRole {
  ADMIN
  REALTOR
  CLIENT
}

enum PropertyType {
  APARTMENT
  HOUSE
  COMMERCIAL
  LAND
}

enum PropertyStatus {
  AVAILABLE
  RENTED
  SOLD
  MAINTENANCE
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  PROSPECT
}

enum ClientType {
  TENANT
  LANDLORD
  BOTH
}

enum DealStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ContractStatus {
  DRAFT
  SIGNED
  EXPIRED
  TERMINATED
}

enum PaymentType {
  RENT
  DEPOSIT
  UTILITIES
  MAINTENANCE
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}
