// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(REALTOR)
  avatar    String?
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  properties    Property[]
  clients       Client[]
  deals         Deal[]
  contracts     Contract[]
  payments      Payment[]
  notifications Notification[]
  sessions      Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Property {
  id          String   @id @default(cuid())
  title       String
  description String?
  address     String
  price       Float
  type        PropertyType
  status      PropertyStatus @default(AVAILABLE)
  bedrooms    Int?
  bathrooms   Int?
  area        Float?
  images      String[]
  features    String[]
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deals  Deal[]

  @@map("properties")
}

model Client {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  middleName String?
  email     String?
  phone     String
  birthDate DateTime?
  type      ClientType @default(TENANT)
  passport  String?
  snils     String?
  inn       String?
  address   String?
  city      String?
  notes     String?
  source    String?
  isActive  Boolean   @default(true)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  deals      Deal[]

  @@map("clients")
}

model Deal {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      DealStatus @default(NEW)
  amount      Float?
  startDate   DateTime?
  endDate     DateTime?
  userId      String
  clientId    String?
  propertyId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  client   Client?  @relation(fields: [clientId], references: [id])
  property Property? @relation(fields: [propertyId], references: [id])

  @@map("deals")
}

model Contract {
  id          String   @id @default(cuid())
  title       String
  content     String
  status      ContractStatus @default(DRAFT)
  signedAt    DateTime?
  expiresAt   DateTime?
  userId      String
  dealId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contracts")
}

model Payment {
  id        String   @id @default(cuid())
  amount    Float
  type      PaymentType
  status    PaymentStatus @default(PENDING)
  dueDate   DateTime?
  paidAt    DateTime?
  userId    String
  dealId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  read      Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum UserRole {
  ADMIN
  REALTOR
  CLIENT
}

enum PropertyType {
  APARTMENT
  HOUSE
  COMMERCIAL
  LAND
}

enum PropertyStatus {
  AVAILABLE
  RENTED
  SOLD
  MAINTENANCE
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  PROSPECT
}

enum ClientType {
  TENANT
  LANDLORD
  BOTH
}

enum DealStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ContractStatus {
  DRAFT
  SIGNED
  EXPIRED
  TERMINATED
}

enum PaymentType {
  RENT
  DEPOSIT
  UTILITIES
  MAINTENANCE
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}