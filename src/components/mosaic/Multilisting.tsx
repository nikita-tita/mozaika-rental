'use client';

import React, { useState, useCallback } from 'react';
import { Upload, Globe, TrendingUp, Target, CheckCircle, Clock, Eye, Edit3, Share2, BarChart3 } from 'lucide-react';

interface Property {
  id: string;
  title: string;
  address: string;
  price: number;
  rooms: number;
  area: number;
  floor: number;
  totalFloors: number;
  description: string;
  photos: string[];
  amenities: string[];
  coordinates: {
    lat: number;
    lng: number;
  };
}

interface Platform {
  id: string;
  name: string;
  icon: string;
  color: string;
  status: 'pending' | 'published' | 'error';
  views: number;
  contacts: number;
  publishedAt?: Date;
  listingUrl?: string;
  commission: number;
}

interface MultilistingProps {
  property: Property;
  onComplete: (publishedListings: Platform[]) => void;
  onBack: () => void;
}

export default function Multilisting({ property, onComplete, onBack }: MultilistingProps) {
  const [currentStep, setCurrentStep] = useState(1);
  const [isOptimizing, setIsOptimizing] = useState(false);
  const [optimizedContent, setOptimizedContent] = useState({
    title: property.title,
    description: property.description,
    tags: [] as string[],
    highlights: [] as string[]
  });
  const [selectedPlatforms, setSelectedPlatforms] = useState<string[]>([]);
  const [isPublishing, setIsPublishing] = useState(false);
  const [publishedListings, setPublishedListings] = useState<Platform[]>([]);

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏
  const availablePlatforms: Platform[] = [
    {
      id: 'avito',
      name: 'Avito',
      icon: 'üè†',
      color: 'bg-orange-500',
      status: 'pending',
      views: 0,
      contacts: 0,
      commission: 0
    },
    {
      id: 'cian',
      name: '–¶–ò–ê–ù',
      icon: 'üè¢',
      color: 'bg-blue-500',
      status: 'pending',
      views: 0,
      contacts: 0,
      commission: 0
    },
    {
      id: 'domclick',
      name: '–î–æ–º–ö–ª–∏–∫',
      icon: 'üè¶',
      color: 'bg-green-500',
      status: 'pending',
      views: 0,
      contacts: 0,
      commission: 0
    },
    {
      id: 'yandex',
      name: '–Ø–Ω–¥–µ–∫—Å.–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
      icon: 'üîç',
      color: 'bg-red-500',
      status: 'pending',
      views: 0,
      contacts: 0,
      commission: 0
    },
    {
      id: 'realty',
      name: 'Realty',
      icon: 'üìä',
      color: 'bg-purple-500',
      status: 'pending',
      views: 0,
      contacts: 0,
      commission: 0
    }
  ];

  // –ò–ò-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const optimizeContent = useCallback(async () => {
    setIsOptimizing(true);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –ò–ò-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const optimized = {
      title: `–°–≤–µ—Ç–ª–∞—è ${property.rooms}-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ, ${property.area}–º¬≤`,
      description: `–û—Ç–ª–∏—á–Ω–∞—è ${property.rooms}-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ ${property.area}–º¬≤ –Ω–∞ ${property.floor}/${property.totalFloors} —ç—Ç–∞–∂–µ –≤ –ø—Ä–µ—Å—Ç–∏–∂–Ω–æ–º —Ä–∞–π–æ–Ω–µ. –ö–≤–∞—Ä—Ç–∏—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞—Å–µ–ª–µ–Ω–∏—é, –µ—Å—Ç—å –≤—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –º–µ–±–µ–ª—å –∏ —Ç–µ—Ö–Ω–∏–∫–∞. –û—Ç–ª–∏—á–Ω–∞—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å, —Ä—è–¥–æ–º –º–µ—Ç—Ä–æ, –º–∞–≥–∞–∑–∏–Ω—ã, —à–∫–æ–ª—ã –∏ –¥–µ—Ç—Å–∫–∏–µ —Å–∞–¥—ã. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–µ–º—å–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.`,
      tags: ['–°–≤–µ—Ç–ª–∞—è', '–†–µ–º–æ–Ω—Ç', '–ú–µ–±–µ–ª—å', '–¢–µ—Ö–Ω–∏–∫–∞', '–ú–µ—Ç—Ä–æ', '–¶–µ–Ω—Ç—Ä'],
      highlights: [
        `–°–≤–µ—Ç–ª–∞—è ${property.rooms}-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞`,
        `${property.area}–º¬≤, ${property.floor}/${property.totalFloors} —ç—Ç–∞–∂`,
        '–ü–æ–ª–Ω–æ—Å—Ç—å—é –º–µ–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è',
        '–í—Å—è —Ç–µ—Ö–Ω–∏–∫–∞ –≤ –Ω–∞–ª–∏—á–∏–∏',
        '–û—Ç–ª–∏—á–Ω–∞—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å',
        '–†—è–¥–æ–º –º–µ—Ç—Ä–æ, –º–∞–≥–∞–∑–∏–Ω—ã, —à–∫–æ–ª—ã'
      ]
    };
    
    setOptimizedContent(optimized);
    setIsOptimizing(false);
    setCurrentStep(2);
  }, [property]);

  // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞—Ö
  const publishListings = useCallback(async () => {
    setIsPublishing(true);
    
    const platformsToPublish = availablePlatforms.filter(p => selectedPlatforms.includes(p.id));
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ –∫–∞–∂–¥–æ–π –ø–ª–æ—â–∞–¥–∫–µ
    for (let i = 0; i < platformsToPublish.length; i++) {
      const platform = platformsToPublish[i];
      
      // –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const publishedPlatform = {
        ...platform,
        status: 'published' as const,
        publishedAt: new Date(),
        listingUrl: `https://${platform.id}.ru/listing/${Math.random().toString(36).substr(2, 9)}`,
        views: Math.floor(Math.random() * 50) + 10,
        contacts: Math.floor(Math.random() * 8) + 2
      };
      
      setPublishedListings(prev => [...prev, publishedPlatform]);
    }
    
    setIsPublishing(false);
    setCurrentStep(3);
  }, [selectedPlatforms]);

  const togglePlatform = (platformId: string) => {
    setSelectedPlatforms(prev => 
      prev.includes(platformId) 
        ? prev.filter(id => id !== platformId)
        : [...prev, platformId]
    );
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'published': return 'text-green-400';
      case 'pending': return 'text-yellow-400';
      case 'error': return 'text-red-400';
      default: return 'text-gray-400';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'published': return <CheckCircle className="w-4 h-4" />;
      case 'pending': return <Clock className="w-4 h-4" />;
      case 'error': return <Eye className="w-4 h-4" />;
      default: return <Clock className="w-4 h-4" />;
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'published': return '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ';
      case 'pending': return '–û–∂–∏–¥–∞–µ—Ç';
      case 'error': return '–û—à–∏–±–∫–∞';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white p-6">
      <div className="max-w-6xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-600 rounded-xl flex items-center justify-center">
              <Globe className="w-6 h-6" />
            </div>
            <div>
              <h1 className="text-2xl font-bold">üì§ –ú—É–ª—å—Ç–∏–ª–∏—Å—Ç–∏–Ω–≥</h1>
              <p className="text-gray-400">–ò–ò-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö</p>
            </div>
          </div>
          
          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
          <div className="flex items-center gap-4 mb-6">
            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
              currentStep >= 1 ? 'bg-green-500 text-white' : 'bg-gray-700 text-gray-400'
            }`}>
              1
            </div>
            <div className={`flex-1 h-1 rounded ${
              currentStep >= 2 ? 'bg-green-500' : 'bg-gray-700'
            }`}></div>
            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
              currentStep >= 2 ? 'bg-green-500 text-white' : 'bg-gray-700 text-gray-400'
            }`}>
              2
            </div>
            <div className={`flex-1 h-1 rounded ${
              currentStep >= 3 ? 'bg-green-500' : 'bg-gray-700'
            }`}></div>
            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
              currentStep >= 3 ? 'bg-green-500 text-white' : 'bg-gray-700 text-gray-400'
            }`}>
              3
            </div>
          </div>
        </div>

        {/* –®–∞–≥ 1: –ò–ò-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
        {currentStep === 1 && (
          <div className="space-y-6">
            <div className="bg-gray-800 rounded-xl p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-semibold">–ò–ò-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h2>
                <div className="text-right">
                  <div className="text-2xl font-bold text-green-400">300‚ÇΩ</div>
                  <div className="text-sm text-gray-400">–∑–∞ –æ–±—ä–µ–∫—Ç</div>
                </div>
              </div>

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ */}
              <div className="bg-gray-700 rounded-lg p-6 mb-6">
                <h3 className="font-medium mb-4">–û–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è</h3>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div>
                    <p className="text-gray-400 text-sm">–ê–¥—Ä–µ—Å</p>
                    <p className="font-medium">{property.address}</p>
                  </div>
                  <div>
                    <p className="text-gray-400 text-sm">–¶–µ–Ω–∞</p>
                    <p className="font-medium text-green-400">{property.price.toLocaleString()} ‚ÇΩ/–º–µ—Å</p>
                  </div>
                  <div>
                    <p className="text-gray-400 text-sm">–ö–æ–º–Ω–∞—Ç—ã</p>
                    <p className="font-medium">{property.rooms}</p>
                  </div>
                  <div>
                    <p className="text-gray-400 text-sm">–ü–ª–æ—â–∞–¥—å</p>
                    <p className="font-medium">{property.area}–º¬≤</p>
                  </div>
                </div>
              </div>

              {/* –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
              <div className="space-y-4 mb-6">
                <h3 className="font-medium">–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç</h3>
                
                <div>
                  <label className="block text-sm font-medium mb-2">–ó–∞–≥–æ–ª–æ–≤–æ–∫</label>
                  <input
                    type="text"
                    value={property.title}
                    readOnly
                    className="w-full px-4 py-3 bg-gray-600 border border-gray-500 rounded-lg text-gray-300"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                  <textarea
                    value={property.description}
                    readOnly
                    rows={4}
                    className="w-full px-4 py-3 bg-gray-600 border border-gray-500 rounded-lg text-gray-300"
                  />
                </div>
              </div>

              {/* –ò–ò-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è */}
              <div className="bg-gradient-to-r from-purple-500/10 to-pink-500/10 border border-purple-500/20 rounded-lg p-6 mb-6">
                <div className="flex items-center gap-3 mb-4">
                  <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-600 rounded-lg flex items-center justify-center">
                    <TrendingUp className="w-5 h-5" />
                  </div>
                  <div>
                    <h3 className="font-medium">–ò–ò-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</h3>
                    <p className="text-gray-400 text-sm">–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞</p>
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                  <div className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-green-400" />
                    <span>SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-green-400" />
                    <span>–£–ª—É—á—à–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-green-400" />
                    <span>–ü–æ–¥–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-green-400" />
                    <span>–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤</span>
                  </div>
                </div>
              </div>

              <div className="flex gap-4">
                <button
                  onClick={onBack}
                  className="px-6 py-3 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
                >
                  –ù–∞–∑–∞–¥
                </button>
                <button
                  onClick={optimizeContent}
                  disabled={isOptimizing}
                  className="px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {isOptimizing ? (
                    <>
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                      –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º...
                    </>
                  ) : (
                    <>
                      <Target className="w-4 h-4" />
                      –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        )}

        {/* –®–∞–≥ 2: –í—ã–±–æ—Ä –ø–ª–æ—â–∞–¥–æ–∫ */}
        {currentStep === 2 && (
          <div className="space-y-6">
            <div className="bg-gray-800 rounded-xl p-6">
              <h2 className="text-xl font-semibold mb-6">–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è</h2>

              {/* –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
              <div className="bg-gray-700 rounded-lg p-6 mb-6">
                <h3 className="font-medium mb-4">–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</h3>
                
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">–ó–∞–≥–æ–ª–æ–≤–æ–∫</label>
                    <input
                      type="text"
                      value={optimizedContent.title}
                      onChange={(e) => setOptimizedContent({...optimizedContent, title: e.target.value})}
                      className="w-full px-4 py-3 bg-gray-600 border border-gray-500 rounded-lg focus:border-blue-500 focus:outline-none"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                    <textarea
                      value={optimizedContent.description}
                      onChange={(e) => setOptimizedContent({...optimizedContent, description: e.target.value})}
                      rows={4}
                      className="w-full px-4 py-3 bg-gray-600 border border-gray-500 rounded-lg focus:border-blue-500 focus:outline-none"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</label>
                    <div className="flex flex-wrap gap-2">
                      {optimizedContent.tags.map((tag, index) => (
                        <span key={index} className="px-3 py-1 bg-blue-500/20 text-blue-400 rounded-full text-sm">
                          {tag}
                        </span>
                      ))}
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</label>
                    <div className="space-y-2">
                      {optimizedContent.highlights.map((highlight, index) => (
                        <div key={index} className="flex items-center gap-2">
                          <CheckCircle className="w-4 h-4 text-green-400" />
                          <span className="text-sm">{highlight}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>

              {/* –ü–ª–æ—â–∞–¥–∫–∏ */}
              <div className="space-y-4 mb-6">
                <h3 className="font-medium">–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏</h3>
                
                <div className="grid gap-4">
                  {availablePlatforms.map((platform) => (
                    <label key={platform.id} className="flex items-center gap-4 p-4 bg-gray-700 rounded-lg cursor-pointer hover:bg-gray-600 transition-colors">
                      <input
                        type="checkbox"
                        checked={selectedPlatforms.includes(platform.id)}
                        onChange={() => togglePlatform(platform.id)}
                        className="w-4 h-4 text-green-500"
                      />
                      <div className="flex items-center gap-3">
                        <div className={`w-10 h-10 ${platform.color} rounded-lg flex items-center justify-center text-white`}>
                          <span className="text-lg">{platform.icon}</span>
                        </div>
                        <div>
                          <p className="font-medium">{platform.name}</p>
                          <p className="text-gray-400 text-sm">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ</p>
                        </div>
                      </div>
                      <div className="ml-auto text-right">
                        <p className="text-green-400 font-medium">0‚ÇΩ</p>
                        <p className="text-gray-400 text-xs">–ö–æ–º–∏—Å—Å–∏—è</p>
                      </div>
                    </label>
                  ))}
                </div>
              </div>

              <div className="flex gap-4">
                <button
                  onClick={() => setCurrentStep(1)}
                  className="px-6 py-3 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
                >
                  –ù–∞–∑–∞–¥
                </button>
                <button
                  onClick={publishListings}
                  disabled={selectedPlatforms.length === 0 || isPublishing}
                  className="px-6 py-3 bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {isPublishing ? (
                    <>
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                      –ü—É–±–ª–∏–∫—É–µ–º...
                    </>
                  ) : (
                    <>
                      <Share2 className="w-4 h-4" />
                      –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ {selectedPlatforms.length} –ø–ª–æ—â–∞–¥–∫–∞—Ö
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        )}

        {/* –®–∞–≥ 3: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ */}
        {currentStep === 3 && (
          <div className="space-y-6">
            <div className="bg-gray-800 rounded-xl p-6">
              <h2 className="text-xl font-semibold mb-6">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</h2>

              <div className="grid gap-4 mb-6">
                {publishedListings.map((platform) => (
                  <div key={platform.id} className="bg-gray-700 rounded-lg p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-4">
                        <div className={`w-12 h-12 ${platform.color} rounded-lg flex items-center justify-center text-white`}>
                          <span className="text-xl">{platform.icon}</span>
                        </div>
                        <div>
                          <h3 className="font-medium">{platform.name}</h3>
                          <div className="flex items-center gap-4 mt-2">
                            <span className={`flex items-center gap-1 text-sm ${getStatusColor(platform.status)}`}>
                              {getStatusIcon(platform.status)}
                              {getStatusText(platform.status)}
                            </span>
                            {platform.publishedAt && (
                              <span className="text-gray-400 text-sm">
                                {platform.publishedAt.toLocaleTimeString()}
                              </span>
                            )}
                          </div>
                        </div>
                      </div>
                      
                      <div className="text-right">
                        <div className="flex items-center gap-4">
                          <div>
                            <p className="text-sm text-gray-400">–ü—Ä–æ—Å–º–æ—Ç—Ä—ã</p>
                            <p className="font-medium text-blue-400">{platform.views}</p>
                          </div>
                          <div>
                            <p className="text-sm text-gray-400">–ö–æ–Ω—Ç–∞–∫—Ç—ã</p>
                            <p className="font-medium text-green-400">{platform.contacts}</p>
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        {platform.listingUrl && (
                          <button
                            onClick={() => window.open(platform.listingUrl, '_blank')}
                            className="p-2 bg-blue-500 hover:bg-blue-600 rounded-lg transition-colors"
                            title="–û—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
                          >
                            <Eye className="w-4 h-4" />
                          </button>
                        )}
                        <button className="p-2 bg-gray-600 hover:bg-gray-500 rounded-lg transition-colors">
                          <BarChart3 className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
              <div className="bg-gray-700 rounded-lg p-6 mb-6">
                <h3 className="font-medium mb-4">–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div>
                    <p className="text-gray-400 text-sm">–ü–ª–æ—â–∞–¥–æ–∫</p>
                    <p className="text-2xl font-bold text-blue-400">{publishedListings.length}</p>
                  </div>
                  <div>
                    <p className="text-gray-400 text-sm">–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</p>
                    <p className="text-2xl font-bold text-green-400">
                      {publishedListings.reduce((sum, p) => sum + p.views, 0)}
                    </p>
                  </div>
                  <div>
                    <p className="text-gray-400 text-sm">–ö–æ–Ω—Ç–∞–∫—Ç–æ–≤</p>
                    <p className="text-2xl font-bold text-purple-400">
                      {publishedListings.reduce((sum, p) => sum + p.contacts, 0)}
                    </p>
                  </div>
                  <div>
                    <p className="text-gray-400 text-sm">CTR</p>
                    <p className="text-2xl font-bold text-yellow-400">
                      {publishedListings.length > 0 
                        ? Math.round((publishedListings.reduce((sum, p) => sum + p.contacts, 0) / 
                           publishedListings.reduce((sum, p) => sum + p.views, 0)) * 100)
                        : 0}%
                    </p>
                  </div>
                </div>
              </div>

              <div className="flex gap-4">
                <button
                  onClick={() => setCurrentStep(2)}
                  className="px-6 py-3 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
                >
                  –ù–∞–∑–∞–¥
                </button>
                <button
                  onClick={() => onComplete(publishedListings)}
                  className="px-6 py-3 bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 rounded-lg transition-all flex items-center gap-2"
                >
                  <CheckCircle className="w-4 h-4" />
                  –ó–∞–≤–µ—Ä—à–∏—Ç—å
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
} 