'use client';

import React, { useState } from 'react';
import { 
  Puzzle, 
  ArrowRight, 
  CheckCircle, 
  Clock, 
  Star, 
  TrendingUp, 
  Users, 
  Shield,
  FileText,
  Search,
  ClipboardList,
  FileSignature,
  Globe,
  Shield as ShieldIcon,
  CreditCard,
  Zap
} from 'lucide-react';
import ContractBuilder from './ContractBuilder';
import TenantScoring from './TenantScoring';
import PropertyInventory from './PropertyInventory';
import DigitalSignature from './DigitalSignature';
import Multilisting from './Multilisting';

interface MosaicModule {
  id: string;
  name: string;
  description: string;
  icon: React.ComponentType<any>;
  color: string;
  price: number;
  status: 'available' | 'completed' | 'locked';
  isRequired?: boolean;
  dependencies?: string[];
}

interface MosaicBuilderProps {
  onComplete: (workflow: any) => void;
}

export default function MosaicBuilder({ onComplete }: MosaicBuilderProps) {
  const [currentModule, setCurrentModule] = useState<string | null>(null);
  const [completedModules, setCompletedModules] = useState<string[]>([]);
  const [workflowData, setWorkflowData] = useState<any>({});

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const mockProperty = {
    id: '1',
    title: '–î–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ',
    description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å —Ä–µ–º–æ–Ω—Ç–æ–º',
    type: 'APARTMENT' as const,
    status: 'AVAILABLE' as const,
    address: '—É–ª. –õ–µ–Ω–∏–Ω–∞, 1',
    city: '–ú–æ—Å–∫–≤–∞',
    area: 65,
    rooms: 2,
    amenities: ['Wi-Fi', '–ú–µ–±–µ–ª—å', '–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞'],
    images: [],
    ownerId: '1',
    pricePerMonth: 0,
    deposit: 0,
    utilities: false,
    createdAt: new Date(),
    updatedAt: new Date()
  };

  const mockRealtor = {
    id: '1',
    email: 'realtor@example.com',
    firstName: '–ê–Ω–Ω–∞',
    lastName: '–ü–µ—Ç—Ä–æ–≤–∞',
    role: 'REALTOR' as const,
    verified: true,
    createdAt: new Date(),
    updatedAt: new Date()
  };

  // –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏ –º–æ–∑–∞–π–∫–∏
  const mosaicModules: MosaicModule[] = [
    {
      id: 'contract',
      name: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –∞—Ä–µ–Ω–¥—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º',
      icon: FileText,
      color: 'from-blue-500 to-purple-600',
      price: 0,
      status: 'available',
      isRequired: true
    },
    {
      id: 'scoring',
      name: '–°–∫–æ—Ä–∏–Ω–≥ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞',
      description: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –ù–ë–ö–ò –∏ –§–°–°–ü',
      icon: Search,
      color: 'from-green-500 to-blue-600',
      price: 0,
      status: 'available',
      isRequired: true
    },
    {
      id: 'inventory',
      name: '–û–ø–∏—Å—å –∏–º—É—â–µ—Å—Ç–≤–∞',
      description: '–ò–ò-–∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∏',
      icon: ClipboardList,
      color: 'from-purple-500 to-pink-600',
      price: 0,
      status: 'available'
    },
    {
      id: 'signature',
      name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å',
      description: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –≠–¶–ü',
      icon: FileSignature,
      color: 'from-green-500 to-blue-600',
      price: 50,
      status: 'available',
      dependencies: ['contract']
    },
    {
      id: 'multilisting',
      name: '–ú—É–ª—å—Ç–∏–ª–∏—Å—Ç–∏–Ω–≥',
      description: '–ò–ò-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö',
      icon: Globe,
      color: 'from-purple-500 to-pink-600',
      price: 300,
      status: 'available',
      dependencies: ['inventory']
    },
    {
      id: 'insurance',
      name: '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –∞—Ä–µ–Ω–¥—ã',
      description: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞',
      icon: ShieldIcon,
      color: 'from-yellow-500 to-orange-600',
      price: 500,
      status: 'locked',
      dependencies: ['scoring']
    },
    {
      id: 'escrow',
      name: '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ª–æ–≥',
      description: '–≠—Å–∫—Ä–æ—É-—Å—á–µ—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞',
      icon: CreditCard,
      color: 'from-red-500 to-pink-600',
      price: 650,
      status: 'locked',
      dependencies: ['scoring']
    },
    {
      id: 'salary',
      name: '–û–∫–ª–∞–¥ —Ä–∏–µ–ª—Ç–æ—Ä–∞',
      description: '–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç –∞—Ä–µ–Ω–¥—ã –æ–±—ä–µ–∫—Ç–∞',
      icon: TrendingUp,
      color: 'from-green-500 to-emerald-600',
      price: 4500,
      status: 'locked',
      dependencies: ['multilisting']
    },
    {
      id: 'yandex',
      name: '–Ø–Ω–¥–µ–∫—Å –ê—Ä–µ–Ω–¥–∞',
      description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π',
      icon: Zap,
      color: 'from-red-500 to-yellow-600',
      price: 18000,
      status: 'locked',
      dependencies: ['multilisting']
    }
  ];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
  const isModuleAvailable = (module: MosaicModule) => {
    if (module.status === 'locked') return false;
    if (!module.dependencies) return true;
    return module.dependencies.every(dep => completedModules.includes(dep));
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥—É–ª—è
  const getModuleStatus = (module: MosaicModule) => {
    if (completedModules.includes(module.id)) return 'completed';
    if (isModuleAvailable(module)) return 'available';
    return 'locked';
  };

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–¥—É–ª—è
  const completeModule = (moduleId: string, data: any) => {
    setCompletedModules(prev => [...prev, moduleId]);
    setWorkflowData((prev: any) => ({ ...prev, [moduleId]: data }));
    setCurrentModule(null);
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥—É–ª—è
  const openModule = (module: MosaicModule) => {
    if (isModuleAvailable(module)) {
      setCurrentModule(module.id);
    }
  };

  // –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –º–æ–¥—É–ª–µ–π
  const backToMosaic = () => {
    setCurrentModule(null);
  };

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ workflow
  const finishWorkflow = () => {
    const totalCost = mosaicModules
      .filter(m => completedModules.includes(m.id))
      .reduce((sum, m) => sum + m.price, 0);

    const workflow = {
      modules: completedModules,
      data: workflowData,
      totalCost,
      completedAt: new Date()
    };

    onComplete(workflow);
  };

  // –†–µ–Ω–¥–µ—Ä –º–æ–¥—É–ª—è
  const renderModule = () => {
    switch (currentModule) {
      case 'contract':
        return (
          <ContractBuilder
            property={mockProperty}
            realtor={mockRealtor}
            onContractGenerated={(data) => completeModule('contract', data)}
          />
        );
      case 'scoring':
        return (
          <TenantScoring
            onScoringComplete={(data) => completeModule('scoring', data)}
            onClose={backToMosaic}
          />
        );
      case 'inventory':
        return (
          <PropertyInventory
            onComplete={(data) => completeModule('inventory', data)}
            onBack={backToMosaic}
          />
        );
      case 'signature':
        return (
          <DigitalSignature
            documents={workflowData.contract ? [workflowData.contract] : []}
            onComplete={(data) => completeModule('signature', data)}
            onBack={backToMosaic}
          />
        );
      case 'multilisting':
        return (
          <Multilisting
            property={workflowData.inventory || {
              id: '1',
              title: '–ö–≤–∞—Ä—Ç–∏—Ä–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã',
              address: '–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 1',
              price: 70000,
              rooms: 2,
              area: 65,
              floor: 5,
              totalFloors: 12,
              description: '–£—é—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ',
              photos: [],
              amenities: [],
              coordinates: { lat: 55.7558, lng: 37.6176 }
            }}
            onComplete={(data) => completeModule('multilisting', data)}
            onBack={backToMosaic}
          />
        );
      default:
        return null;
    }
  };

  // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç –º–æ–¥—É–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
  if (currentModule) {
    return renderModule();
  }

  return (
    <div className="min-h-screen bg-gray-900 text-white p-6">
      <div className="max-w-7xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-600 rounded-xl flex items-center justify-center">
              <Puzzle className="w-6 h-6" />
            </div>
            <div>
              <h1 className="text-2xl font-bold">üß© –°–æ–±–µ—Ä–∏ —Å–≤–æ—é —Å–¥–µ–ª–∫—É</h1>
              <p className="text-gray-400">–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ workflow</p>
            </div>
          </div>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-gray-800 rounded-lg p-4">
              <div className="flex items-center gap-3">
                <CheckCircle className="w-8 h-8 text-green-400" />
                <div>
                  <p className="text-2xl font-bold text-green-400">{completedModules.length}</p>
                  <p className="text-gray-400 text-sm">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</p>
                </div>
              </div>
            </div>
            <div className="bg-gray-800 rounded-lg p-4">
              <div className="flex items-center gap-3">
                <Clock className="w-8 h-8 text-yellow-400" />
                <div>
                  <p className="text-2xl font-bold text-yellow-400">{mosaicModules.length - completedModules.length}</p>
                  <p className="text-gray-400 text-sm">–î–æ—Å—Ç—É–ø–Ω–æ</p>
                </div>
              </div>
            </div>
            <div className="bg-gray-800 rounded-lg p-4">
              <div className="flex items-center gap-3">
                <TrendingUp className="w-8 h-8 text-blue-400" />
                <div>
                  <p className="text-2xl font-bold text-blue-400">
                    {mosaicModules
                      .filter(m => completedModules.includes(m.id))
                      .reduce((sum, m) => sum + m.price, 0)
                      .toLocaleString()}‚ÇΩ
                  </p>
                  <p className="text-gray-400 text-sm">–°—Ç–æ–∏–º–æ—Å—Ç—å</p>
                </div>
              </div>
            </div>
            <div className="bg-gray-800 rounded-lg p-4">
              <div className="flex items-center gap-3">
                <Star className="w-8 h-8 text-purple-400" />
                <div>
                  <p className="text-2xl font-bold text-purple-400">
                    {Math.round((completedModules.length / mosaicModules.length) * 100)}%
                  </p>
                  <p className="text-gray-400 text-sm">–ü—Ä–æ–≥—Ä–µ—Å—Å</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* –ú–æ–¥—É–ª–∏ –º–æ–∑–∞–π–∫–∏ */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {mosaicModules.map((module) => {
            const status = getModuleStatus(module);
            const isAvailable = isModuleAvailable(module);
            
            return (
              <div
                key={module.id}
                className={`relative bg-gray-800 rounded-xl p-6 transition-all cursor-pointer ${
                  isAvailable 
                    ? 'hover:bg-gray-700 hover:transform hover:scale-105' 
                    : 'opacity-50 cursor-not-allowed'
                }`}
                onClick={() => openModule(module)}
              >
                {/* –°—Ç–∞—Ç—É—Å */}
                <div className="absolute top-4 right-4">
                  {status === 'completed' && (
                    <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                      <CheckCircle className="w-4 h-4 text-white" />
                    </div>
                  )}
                  {status === 'locked' && (
                    <div className="w-8 h-8 bg-gray-600 rounded-full flex items-center justify-center">
                      <Shield className="w-4 h-4 text-gray-400" />
                    </div>
                  )}
                </div>

                {/* –ò–∫–æ–Ω–∫–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
                <div className="flex items-center gap-4 mb-4">
                  <div className={`w-12 h-12 bg-gradient-to-br ${module.color} rounded-xl flex items-center justify-center`}>
                    <module.icon className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <h3 className="font-semibold">{module.name}</h3>
                    <p className="text-gray-400 text-sm">{module.description}</p>
                  </div>
                </div>

                {/* –¶–µ–Ω–∞ –∏ —Å—Ç–∞—Ç—É—Å */}
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    {module.price === 0 ? (
                      <span className="text-green-400 font-medium">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
                    ) : (
                      <span className="text-yellow-400 font-medium">{module.price.toLocaleString()}‚ÇΩ</span>
                    )}
                    {module.isRequired && (
                      <span className="px-2 py-1 bg-red-500/20 text-red-400 rounded text-xs">
                        –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
                      </span>
                    )}
                  </div>
                  
                  {isAvailable && (
                    <ArrowRight className="w-5 h-5 text-gray-400" />
                  )}
                </div>

                {/* –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ */}
                {module.dependencies && module.dependencies.length > 0 && (
                  <div className="mt-4 pt-4 border-t border-gray-700">
                    <p className="text-gray-400 text-sm mb-2">–¢—Ä–µ–±—É–µ—Ç:</p>
                    <div className="flex flex-wrap gap-1">
                      {module.dependencies.map((dep) => {
                        const depModule = mosaicModules.find(m => m.id === dep);
                        const isCompleted = completedModules.includes(dep);
                        return (
                          <span
                            key={dep}
                            className={`px-2 py-1 rounded text-xs ${
                              isCompleted 
                                ? 'bg-green-500/20 text-green-400' 
                                : 'bg-gray-600 text-gray-400'
                            }`}
                          >
                            {depModule?.name.split(' ')[1] || dep}
                          </span>
                        );
                      })}
                    </div>
                  </div>
                )}
              </div>
            );
          })}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="mt-8 flex justify-between items-center">
          <div className="text-gray-400">
            <p>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ workflow</p>
            <p className="text-sm">–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –æ—Ç–º–µ—á–µ–Ω—ã –∫—Ä–∞—Å–Ω—ã–º</p>
          </div>
          
          <div className="flex gap-4">
            <button
              onClick={finishWorkflow}
              disabled={completedModules.length === 0}
              className="px-6 py-3 bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
            >
              <CheckCircle className="w-4 h-4" />
              –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É
            </button>
          </div>
        </div>

        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ */}
        <div className="mt-8 bg-gray-800 rounded-xl p-6">
          <h3 className="font-medium mb-4">üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ workflow</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-gray-700 rounded-lg p-4">
              <h4 className="font-medium text-green-400 mb-2">üöÄ –ë—ã—Å—Ç—Ä–∞—è —Å–¥–µ–ª–∫–∞</h4>
              <p className="text-sm text-gray-400 mb-3">–î–æ–≥–æ–≤–æ—Ä ‚Üí –°–∫–æ—Ä–∏–Ω–≥ ‚Üí –ü–æ–¥–ø–∏—Å—å</p>
              <div className="flex items-center gap-2 text-xs text-gray-500">
                <span>–í—Ä–µ–º—è: 30 –º–∏–Ω</span>
                <span>‚Ä¢</span>
                <span>–°—Ç–æ–∏–º–æ—Å—Ç—å: 50‚ÇΩ</span>
              </div>
            </div>
            <div className="bg-gray-700 rounded-lg p-4">
              <h4 className="font-medium text-blue-400 mb-2">üìà –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ</h4>
              <p className="text-sm text-gray-400 mb-3">–í—Å–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞</p>
              <div className="flex items-center gap-2 text-xs text-gray-500">
                <span>–í—Ä–µ–º—è: 2 —á–∞—Å–∞</span>
                <span>‚Ä¢</span>
                <span>–°—Ç–æ–∏–º–æ—Å—Ç—å: 24,500‚ÇΩ</span>
              </div>
            </div>
            <div className="bg-gray-700 rounded-lg p-4">
              <h4 className="font-medium text-purple-400 mb-2">üõ°Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞</h4>
              <p className="text-sm text-gray-400 mb-3">–°–∫–æ—Ä–∏–Ω–≥ ‚Üí –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ ‚Üí –≠—Å–∫—Ä–æ—É</p>
              <div className="flex items-center gap-2 text-xs text-gray-500">
                <span>–í—Ä–µ–º—è: 1 —á–∞—Å</span>
                <span>‚Ä¢</span>
                <span>–°—Ç–æ–∏–º–æ—Å—Ç—å: 1,150‚ÇΩ</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 