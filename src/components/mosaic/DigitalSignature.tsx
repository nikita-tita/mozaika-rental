'use client';

import React, { useState, useEffect } from 'react';
import { FileText, User, CheckCircle, Clock, AlertCircle, Download, Send, Eye, Lock } from 'lucide-react';

interface Document {
  id: string;
  name: string;
  type: 'contract' | 'inventory' | 'insurance' | 'escrow';
  status: 'pending' | 'signed' | 'expired';
  createdAt: Date;
  expiresAt: Date;
  signers: Signer[];
  fileUrl: string;
}

interface Signer {
  id: string;
  name: string;
  email: string;
  phone: string;
  role: 'landlord' | 'tenant' | 'realtor' | 'witness';
  status: 'pending' | 'signed' | 'declined';
  signedAt?: Date;
  signatureMethod?: 'sms' | 'email' | 'gosuslugi';
}

interface DigitalSignatureProps {
  documents: Document[];
  onComplete: (signedDocuments: Document[]) => void;
  onBack: () => void;
}

export default function DigitalSignature({ documents, onComplete, onBack }: DigitalSignatureProps) {
  const [currentStep, setCurrentStep] = useState(1);
  const [selectedDocument, setSelectedDocument] = useState<Document | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [signatureMethod, setSignatureMethod] = useState<'sms' | 'email' | 'gosuslugi'>('sms');
  const [verificationCode, setVerificationCode] = useState('');
  const [showVerification, setShowVerification] = useState(false);
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [selectedSigners, setSelectedSigners] = useState<Signer[]>([]);
  const [availableClients, setAvailableClients] = useState<any[]>([]);

  // –°—Ç–∞—Ç—É—Å—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'signed': return 'text-green-400';
      case 'pending': return 'text-yellow-400';
      case 'expired': return 'text-red-400';
      default: return 'text-gray-400';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'signed': return <CheckCircle className="w-4 h-4" />;
      case 'pending': return <Clock className="w-4 h-4" />;
      case 'expired': return <AlertCircle className="w-4 h-4" />;
      default: return <Clock className="w-4 h-4" />;
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'signed': return '–ü–æ–¥–ø–∏—Å–∞–Ω';
      case 'pending': return '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∏';
      case 'expired': return '–ò—Å—Ç–µ–∫ —Å—Ä–æ–∫';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const getDocumentTypeText = (type: string) => {
    switch (type) {
      case 'contract': return '–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã';
      case 'inventory': return '–û–ø–∏—Å—å –∏–º—É—â–µ—Å—Ç–≤–∞';
      case 'insurance': return '–°—Ç—Ä–∞—Ö–æ–≤–æ–π –ø–æ–ª–∏—Å';
      case 'escrow': return '–≠—Å–∫—Ä–æ—É-—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ';
      default: return '–î–æ–∫—É–º–µ–Ω—Ç';
    }
  };

  const getDocumentTypeIcon = (type: string) => {
    switch (type) {
      case 'contract': return 'üìÑ';
      case 'inventory': return 'üìã';
      case 'insurance': return 'üõ°Ô∏è';
      case 'escrow': return 'üè¶';
      default: return 'üìÑ';
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setUploadedFile(file);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
  useEffect(() => {
    const fetchClients = async () => {
      try {
        const response = await fetch('/api/clients');
        const data = await response.json();
        if (data.success) {
          setAvailableClients(data.data);
        }
      } catch (error) {
        console.error('Error fetching clients:', error);
      }
    };
    fetchClients();
  }, []);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞
  const addSigner = (client: any, role: 'landlord' | 'tenant' | 'realtor' | 'witness') => {
    const newSigner: Signer = {
      id: client.id,
      name: `${client.firstName} ${client.lastName}`,
      email: client.email || '',
      phone: client.phone,
      role,
      status: 'pending'
    };
    setSelectedSigners(prev => [...prev, newSigner]);
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞
  const removeSigner = (signerId: string) => {
    setSelectedSigners(prev => prev.filter(s => s.id !== signerId));
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const sendVerificationCode = async (signer: Signer) => {
    setIsProcessing(true);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    setShowVerification(true);
    setIsProcessing(false);
  };

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
  const confirmSignature = async () => {
    if (!verificationCode || !selectedDocument) return;
    
    setIsProcessing(true);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // –í –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π –∫–æ–¥
    const updatedDocument = {
      ...selectedDocument,
      signers: selectedDocument.signers.map(signer =>
        signer.id === 'current-user'
          ? { ...signer, status: 'signed' as const, signedAt: new Date(), signatureMethod }
          : signer
      ),
      status: selectedDocument.signers.every(s => s.id === 'current-user' || s.status === 'signed') 
        ? 'signed' as const
        : 'pending' as const
    };
    
    setSelectedDocument(updatedDocument);
    setShowVerification(false);
    setVerificationCode('');
    setIsProcessing(false);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
    alert('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω!\n\n–ü–æ–¥–ø–∏—Å—å –∏–º–µ–µ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é —Å–∏–ª—É.\n\n–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:\n- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∞—Ä—Ö–∏–≤–µ\n- –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–ø–∏–π —Å—Ç–æ—Ä–æ–Ω–∞–º\n- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–µ—Å—Ç—Ä–æ–º')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø–æ–¥–ø–∏—Å–∞–ª–∏
    const allSigned = updatedDocument.signers.every(s => s.status === 'signed');
    if (allSigned) {
      setTimeout(() => {
        onComplete([updatedDocument]);
      }, 1000);
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –ø–æ–¥–ø–∏—Å—å
  const sendForSignature = async (document: Document) => {
    setIsProcessing(true);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const updatedDocument = {
      ...document,
      status: 'pending' as const,
      signers: document.signers.map(signer => ({
        ...signer,
        status: 'pending' as const
      }))
    };
    
    setSelectedDocument(updatedDocument);
    setIsProcessing(false);
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white p-6">
      <div className="max-w-6xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-12 h-12 bg-gradient-to-br from-green-500 to-blue-600 rounded-xl flex items-center justify-center">
              <FileText className="w-6 h-6" />
            </div>
            <div>
              <h1 className="text-2xl font-bold">‚úçÔ∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å</h1>
              <p className="text-gray-400">–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –≠–¶–ü</p>
            </div>
          </div>
          
          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
          <div className="flex items-center gap-4 mb-6">
            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
              currentStep >= 1 ? 'bg-green-500 text-white' : 'bg-gray-700 text-gray-400'
            }`}>
              1
            </div>
            <div className={`flex-1 h-1 rounded ${
              currentStep >= 2 ? 'bg-green-500' : 'bg-gray-700'
            }`}></div>
            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
              currentStep >= 2 ? 'bg-green-500 text-white' : 'bg-gray-700 text-gray-400'
            }`}>
              2
            </div>
            <div className={`flex-1 h-1 rounded ${
              currentStep >= 3 ? 'bg-green-500' : 'bg-gray-700'
            }`}></div>
            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
              currentStep >= 3 ? 'bg-green-500 text-white' : 'bg-gray-700 text-gray-400'
            }`}>
              3
            </div>
          </div>
        </div>

        {/* –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –≤—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–≤ */}
        {currentStep === 1 && (
          <div className="space-y-6">
            <div className="bg-gray-800 rounded-xl p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-semibold">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è</h2>
              </div>

              {/* –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ */}
              <div className="mb-8">
                <h3 className="text-lg font-medium mb-4">1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç</h3>
                <div className="border-2 border-dashed border-gray-600 rounded-lg p-8 text-center">
                  {uploadedFile ? (
                    <div className="space-y-4">
                      <div className="flex items-center justify-center gap-3">
                        <FileText className="w-8 h-8 text-green-400" />
                        <div>
                          <p className="font-medium">{uploadedFile.name}</p>
                          <p className="text-sm text-gray-400">
                            {(uploadedFile.size / 1024 / 1024).toFixed(2)} MB
                          </p>
                        </div>
                      </div>
                      <button
                        onClick={() => setUploadedFile(null)}
                        className="text-red-400 hover:text-red-300 text-sm"
                      >
                        –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
                      </button>
                    </div>
                  ) : (
                    <div>
                      <input
                        type="file"
                        accept=".pdf,.doc,.docx"
                        onChange={handleFileUpload}
                        className="hidden"
                        id="file-upload"
                      />
                      <label
                        htmlFor="file-upload"
                        className="cursor-pointer flex flex-col items-center gap-4"
                      >
                        <div className="w-16 h-16 bg-gray-700 rounded-full flex items-center justify-center">
                          <FileText className="w-8 h-8 text-gray-400" />
                        </div>
                        <div>
                          <p className="font-medium">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞</p>
                          <p className="text-sm text-gray-400">
                            –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOC, DOCX
                          </p>
                        </div>
                      </label>
                    </div>
                  )}
                </div>
              </div>

              {/* –í—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–≤ */}
              <div className="mb-8">
                <h3 className="text-lg font-medium mb-4">2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–≤</h3>
                
                {/* –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–≤ */}
                {selectedSigners.length > 0 && (
                  <div className="mb-6">
                    <h4 className="text-md font-medium mb-3">–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç—ã:</h4>
                    <div className="space-y-2">
                      {selectedSigners.map((signer) => (
                        <div key={signer.id} className="flex items-center justify-between bg-gray-700 rounded-lg p-3">
                          <div className="flex items-center gap-3">
                            <User className="w-5 h-5 text-gray-400" />
                            <div>
                              <p className="font-medium">{signer.name}</p>
                              <p className="text-sm text-gray-400">{signer.phone}</p>
                              <span className="inline-block px-2 py-1 bg-blue-500 text-xs rounded">
                                {signer.role === 'landlord' ? '–ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å' :
                                 signer.role === 'tenant' ? '–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä' :
                                 signer.role === 'realtor' ? '–†–∏–µ–ª—Ç–æ—Ä' : '–°–≤–∏–¥–µ—Ç–µ–ª—å'}
                              </span>
                            </div>
                          </div>
                          <button
                            onClick={() => removeSigner(signer.id)}
                            className="text-red-400 hover:text-red-300"
                          >
                            –£–¥–∞–ª–∏—Ç—å
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–≤ */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {availableClients.map((client) => (
                    <div key={client.id} className="bg-gray-700 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <div>
                          <p className="font-medium">{client.firstName} {client.lastName}</p>
                          <p className="text-sm text-gray-400">{client.phone}</p>
                        </div>
                        <div className="flex gap-2">
                          {client.type === 'LANDLORD' || client.type === 'BOTH' ? (
                            <button
                              onClick={() => addSigner(client, 'landlord')}
                              className="px-3 py-1 bg-green-500 hover:bg-green-600 rounded text-xs"
                            >
                              –ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å
                            </button>
                          ) : null}
                          {client.type === 'TENANT' || client.type === 'BOTH' ? (
                            <button
                              onClick={() => addSigner(client, 'tenant')}
                              className="px-3 py-1 bg-blue-500 hover:bg-blue-600 rounded text-xs"
                            >
                              –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä
                            </button>
                          ) : null}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="mt-6 flex gap-4">
                <button
                  onClick={onBack}
                  className="px-6 py-3 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
                >
                  –ù–∞–∑–∞–¥
                </button>
                <button
                  onClick={() => setCurrentStep(2)}
                  disabled={!uploadedFile || selectedSigners.length === 0}
                  className="px-6 py-3 bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 rounded-lg transition-all flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <Send className="w-4 h-4" />
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–¥–ø–∏—Å—å
                </button>
              </div>
            </div>
          </div>
        )}

        {/* –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å—å */}
        {currentStep === 2 && (
          <div className="space-y-6">
            <div className="bg-gray-800 rounded-xl p-6">
              <h2 className="text-xl font-semibold mb-6">–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å—å</h2>
              
              <div className="mb-6">
                <h3 className="font-medium mb-3">–î–æ–∫—É–º–µ–Ω—Ç: {uploadedFile?.name}</h3>
                <div className="bg-gray-700 rounded-lg p-4">
                  <div className="flex items-center gap-3 mb-3">
                    <span className="text-2xl">üìÑ</span>
                    <div>
                      <p className="font-medium">–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç</p>
                      <p className="text-gray-400 text-sm">
                        –†–∞–∑–º–µ—Ä: {(uploadedFile?.size || 0 / 1024 / 1024).toFixed(2)} MB
                      </p>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <p className="text-sm text-gray-400">–ü–æ–¥–ø–∏—Å–∞–Ω—Ç—ã:</p>
                    {selectedSigners.map((signer) => (
                      <div key={signer.id} className="flex items-center justify-between bg-gray-600 rounded p-2">
                        <div className="flex items-center gap-3">
                          <User className="w-4 h-4 text-gray-400" />
                          <div>
                            <p className="font-medium text-sm">{signer.name}</p>
                            <p className="text-gray-400 text-xs">{signer.phone}</p>
                          </div>
                        </div>
                        <span className={`px-2 py-1 rounded text-xs font-medium ${
                          signer.status === 'signed' ? 'bg-green-500/20 text-green-400' :
                          signer.status === 'pending' ? 'bg-yellow-500/20 text-yellow-400' :
                          'bg-red-500/20 text-red-400'
                        }`}>
                          {signer.status === 'signed' ? '–ü–æ–¥–ø–∏—Å–∞–Ω' :
                           signer.status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç' : '–û—Ç–∫–ª–æ–Ω–µ–Ω'}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              <div className="space-y-4 mb-6">
                <h3 className="font-medium">–°–ø–æ—Å–æ–±—ã –ø–æ–¥–ø–∏—Å–∏:</h3>
                
                <div className="grid gap-4">
                  <label className="flex items-center gap-4 p-4 bg-gray-700 rounded-lg cursor-pointer hover:bg-gray-600 transition-colors">
                    <input
                      type="radio"
                      name="signatureMethod"
                      value="sms"
                      checked={signatureMethod === 'sms'}
                      onChange={(e) => setSignatureMethod(e.target.value as any)}
                      className="w-4 h-4 text-green-500"
                    />
                    <div className="flex-1">
                      <div className="flex items-center gap-3">
                        <div className="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
                          üì±
                        </div>
                        <div>
                          <p className="font-medium">SMS-–ø–æ–¥–ø–∏—Å—å</p>
                          <p className="text-gray-400 text-sm">–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω</p>
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="text-green-400 font-medium">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</p>
                      <p className="text-gray-400 text-xs">–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ</p>
                    </div>
                  </label>

                  <label className="flex items-center gap-4 p-4 bg-gray-700 rounded-lg cursor-pointer hover:bg-gray-600 transition-colors">
                    <input
                      type="radio"
                      name="signatureMethod"
                      value="email"
                      checked={signatureMethod === 'email'}
                      onChange={(e) => setSignatureMethod(e.target.value as any)}
                      className="w-4 h-4 text-green-500"
                    />
                    <div className="flex-1">
                      <div className="flex items-center gap-3">
                        <div className="w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center">
                          üìß
                        </div>
                        <div>
                          <p className="font-medium">Email-–ø–æ–¥–ø–∏—Å—å</p>
                          <p className="text-gray-400 text-sm">–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ email</p>
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="text-green-400 font-medium">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</p>
                      <p className="text-gray-400 text-xs">5-10 –º–∏–Ω—É—Ç</p>
                    </div>
                  </label>

                  <label className="flex items-center gap-4 p-4 bg-gray-700 rounded-lg cursor-pointer hover:bg-gray-600 transition-colors">
                    <input
                      type="radio"
                      name="signatureMethod"
                      value="gosuslugi"
                      checked={signatureMethod === 'gosuslugi'}
                      onChange={(e) => setSignatureMethod(e.target.value as any)}
                      className="w-4 h-4 text-green-500"
                    />
                    <div className="flex-1">
                      <div className="flex items-center gap-3">
                        <div className="w-10 h-10 bg-red-500 rounded-lg flex items-center justify-center">
                          üèõÔ∏è
                        </div>
                        <div>
                          <p className="font-medium">–ì–æ—Å—É—Å–ª—É–≥–∏ –≠–¶–ü</p>
                          <p className="text-gray-400 text-sm">–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å</p>
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="text-green-400 font-medium">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</p>
                      <p className="text-gray-400 text-xs">1-2 –º–∏–Ω—É—Ç—ã</p>
                    </div>
                  </label>
                </div>
              </div>

              <div className="flex gap-4">
                <button
                  onClick={() => setCurrentStep(1)}
                  className="px-6 py-3 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
                >
                  –ù–∞–∑–∞–¥
                </button>
                <button
                  onClick={() => {
                    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å—å
                    setCurrentStep(3);
                  }}
                  className="px-6 py-3 bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 rounded-lg transition-all flex items-center gap-2"
                >
                  <Send className="w-4 h-4" />
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–¥–ø–∏—Å—å
                </button>
              </div>
            </div>
          </div>
        )}

        {/* –®–∞–≥ 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ */}
        {currentStep === 3 && selectedDocument && (
          <div className="space-y-6">
            <div className="bg-gray-800 rounded-xl p-6">
              <h2 className="text-xl font-semibold mb-6">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏</h2>
              
              {showVerification ? (
                <div className="space-y-6">
                  <div className="bg-gray-700 rounded-lg p-6 text-center">
                    <div className="w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4">
                      <CheckCircle className="w-8 h-8" />
                    </div>
                    <h3 className="text-lg font-medium mb-2">–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</h3>
                    <p className="text-gray-400 mb-4">
                      –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –≤–∞—à {signatureMethod === 'sms' ? '—Ç–µ–ª–µ—Ñ–æ–Ω' : 'email'}
                    </p>
                    
                    <div className="max-w-xs mx-auto">
                      <input
                        type="text"
                        value={verificationCode}
                        onChange={(e) => setVerificationCode(e.target.value)}
                        placeholder="000000"
                        className="w-full px-4 py-3 bg-gray-600 border border-gray-500 rounded-lg focus:border-blue-500 focus:outline-none text-center text-lg font-mono"
                        maxLength={6}
                      />
                    </div>
                  </div>

                  <div className="flex gap-4">
                    <button
                      onClick={() => setShowVerification(false)}
                      className="px-6 py-3 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
                    >
                      –û—Ç–º–µ–Ω–∞
                    </button>
                    <button
                      onClick={confirmSignature}
                      disabled={verificationCode.length !== 6 || isProcessing}
                      className="px-6 py-3 bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                    >
                      {isProcessing ? (
                        <>
                          <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                          –ü—Ä–æ–≤–µ—Ä—è–µ–º...
                        </>
                      ) : (
                        <>
                          <CheckCircle className="w-4 h-4" />
                          –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å—å
                        </>
                      )}
                    </button>
                  </div>
                </div>
              ) : (
                <div className="space-y-6">
                  <div className="bg-gray-700 rounded-lg p-6">
                    <div className="flex items-center gap-4 mb-4">
                      <div className="w-12 h-12 bg-gradient-to-br from-green-500 to-blue-600 rounded-xl flex items-center justify-center">
                        <Lock className="w-6 h-6" />
                      </div>
                      <div>
                        <h3 className="font-medium">–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å</h3>
                        <p className="text-gray-400 text-sm">
                          {signatureMethod === 'sms' ? 'SMS-–∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' :
                           signatureMethod === 'email' ? 'Email-—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏' :
                           '–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≠–¶–ü —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å–ª—É–≥–∏'}
                        </p>
                      </div>
                    </div>
                    
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <span className="text-gray-400">–î–æ–∫—É–º–µ–Ω—Ç:</span>
                        <span className="font-medium">{selectedDocument.name}</span>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-gray-400">–°–ø–æ—Å–æ–± –ø–æ–¥–ø–∏—Å–∏:</span>
                        <span className="font-medium">
                          {signatureMethod === 'sms' ? 'SMS-–ø–æ–¥–ø–∏—Å—å' :
                           signatureMethod === 'email' ? 'Email-–ø–æ–¥–ø–∏—Å—å' :
                           '–ì–æ—Å—É—Å–ª—É–≥–∏ –≠–¶–ü'}
                        </span>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-gray-400">–°—Ç–∞—Ç—É—Å:</span>
                        <span className="font-medium text-green-400">
                          –ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
                        </span>
                      </div>
                    </div>
                  </div>

                  <div className="flex gap-4">
                    <button
                      onClick={() => setCurrentStep(2)}
                      className="px-6 py-3 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
                    >
                      –ù–∞–∑–∞–¥
                    </button>
                    <button
                      onClick={() => sendVerificationCode(selectedDocument.signers[0])}
                      disabled={isProcessing}
                      className="px-6 py-3 bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                    >
                      {isProcessing ? (
                        <>
                          <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                          –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...
                        </>
                      ) : (
                        <>
                          <Send className="w-4 h-4" />
                          –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥
                        </>
                      )}
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
} 