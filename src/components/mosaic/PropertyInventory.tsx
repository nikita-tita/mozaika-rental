'use client';

import React, { useState, useCallback } from 'react';
import { useDropzone } from 'react-dropzone';
import { Camera, Upload, Trash2, Eye, Edit3, CheckCircle, AlertCircle } from 'lucide-react';

interface InventoryItem {
  id: string;
  name: string;
  condition: 'excellent' | 'good' | 'fair' | 'poor';
  estimatedValue: number;
  category: string;
  description: string;
  confidence: number;
  photoUrl?: string;
}

interface PropertyInventoryProps {
  onComplete: (inventory: InventoryItem[]) => void;
  onBack: () => void;
}

export default function PropertyInventory({ onComplete, onBack }: PropertyInventoryProps) {
  const [step, setStep] = useState(1);
  const [uploadedPhotos, setUploadedPhotos] = useState<File[]>([]);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [inventoryItems, setInventoryItems] = useState<InventoryItem[]>([]);
  const [totalValue, setTotalValue] = useState(0);
  const [selectedItem, setSelectedItem] = useState<InventoryItem | null>(null);

  // –ò–ò-–∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  const analyzePhotos = useCallback(async () => {
    setIsAnalyzing(true);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const mockAnalysis: InventoryItem[] = [
      {
        id: '1',
        name: '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ Samsung',
        condition: 'excellent',
        estimatedValue: 45000,
        category: '–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
        description: '–î–≤—É—Ö–∫–∞–º–µ—Ä–Ω—ã–π —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ —Å –º–æ—Ä–æ–∑–∏–ª—å–Ω–æ–π –∫–∞–º–µ—Ä–æ–π, –±–µ–ª—ã–π —Ü–≤–µ—Ç',
        confidence: 95,
        photoUrl: '/api/photos/refrigerator.jpg'
      },
      {
        id: '2',
        name: '–î–∏–≤–∞–Ω –∫–æ–∂–∞–Ω—ã–π —É–≥–ª–æ–≤–æ–π',
        condition: 'good',
        estimatedValue: 35000,
        category: '–ú–µ–±–µ–ª—å',
        description: '–£–≥–ª–æ–≤–æ–π –¥–∏–≤–∞–Ω –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–π –∫–æ–∂–∏, –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π —Ü–≤–µ—Ç',
        confidence: 88,
        photoUrl: '/api/photos/sofa.jpg'
      },
      {
        id: '3',
        name: '–¢–µ–ª–µ–≤–∏–∑–æ—Ä LG 55"',
        condition: 'excellent',
        estimatedValue: 65000,
        category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        description: 'Smart TV —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º 4K, —á–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç',
        confidence: 92,
        photoUrl: '/api/photos/tv.jpg'
      },
      {
        id: '4',
        name: '–°—Ç–æ–ª –æ–±–µ–¥–µ–Ω–Ω—ã–π –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π',
        condition: 'good',
        estimatedValue: 15000,
        category: '–ú–µ–±–µ–ª—å',
        description: '–û–±–µ–¥–µ–Ω–Ω—ã–π —Å—Ç–æ–ª –∏–∑ –º–∞—Å—Å–∏–≤–∞ –¥–µ—Ä–µ–≤–∞, 6 –º–µ—Å—Ç',
        confidence: 85,
        photoUrl: '/api/photos/table.jpg'
      },
      {
        id: '5',
        name: '–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ Bosch',
        condition: 'excellent',
        estimatedValue: 38000,
        category: '–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
        description: '–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ —Å —Å—É—à–∫–æ–π, –±–µ–ª—ã–π —Ü–≤–µ—Ç',
        confidence: 90,
        photoUrl: '/api/photos/washer.jpg'
      }
    ];

    setInventoryItems(mockAnalysis);
    setTotalValue(mockAnalysis.reduce((sum, item) => sum + item.estimatedValue, 0));
    setIsAnalyzing(false);
    setStep(2);
  }, []);

  const onDrop = useCallback((acceptedFiles: File[]) => {
    setUploadedPhotos(prev => [...prev, ...acceptedFiles]);
  }, []);

  const downloadAct = (content: string, fileName: string) => {
    const blob = new Blob([content], { type: 'text/plain;charset=utf-8' })
    const url = window.URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = fileName
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    window.URL.revokeObjectURL(url)
  }

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'image/*': ['.jpeg', '.jpg', '.png', '.webp']
    },
    multiple: true
  });

  const removePhoto = (index: number) => {
    setUploadedPhotos(prev => prev.filter((_, i) => i !== index));
  };

  const editItem = (item: InventoryItem) => {
    setSelectedItem(item);
    setStep(3);
  };

  const saveItem = (updatedItem: InventoryItem) => {
    setInventoryItems(prev => 
      prev.map(item => item.id === updatedItem.id ? updatedItem : item)
    );
    setSelectedItem(null);
    setStep(2);
  };

  const getConditionColor = (condition: string) => {
    switch (condition) {
      case 'excellent': return 'text-green-400';
      case 'good': return 'text-blue-400';
      case 'fair': return 'text-yellow-400';
      case 'poor': return 'text-red-400';
      default: return 'text-gray-400';
    }
  };

  const getConditionText = (condition: string) => {
    switch (condition) {
      case 'excellent': return '–û—Ç–ª–∏—á–Ω–æ–µ';
      case 'good': return '–•–æ—Ä–æ—à–µ–µ';
      case 'fair': return '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ';
      case 'poor': return '–ü–ª–æ—Ö–æ–µ';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 90) return 'text-green-400';
    if (confidence >= 70) return 'text-yellow-400';
    return 'text-red-400';
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white p-6">
      <div className="max-w-4xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center">
              <Camera className="w-6 h-6" />
            </div>
            <div>
              <h1 className="text-2xl font-bold">üìã –û–ø–∏—Å—å –∏–º—É—â–µ—Å—Ç–≤–∞</h1>
              <p className="text-gray-400">–ò–ò-–∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∏</p>
            </div>
          </div>
          
          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
          <div className="flex items-center gap-4 mb-6">
            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
              step >= 1 ? 'bg-green-500 text-white' : 'bg-gray-700 text-gray-400'
            }`}>
              1
            </div>
            <div className={`flex-1 h-1 rounded ${
              step >= 2 ? 'bg-green-500' : 'bg-gray-700'
            }`}></div>
            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
              step >= 2 ? 'bg-green-500 text-white' : 'bg-gray-700 text-gray-400'
            }`}>
              2
            </div>
            <div className={`flex-1 h-1 rounded ${
              step >= 3 ? 'bg-green-500' : 'bg-gray-700'
            }`}></div>
            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
              step >= 3 ? 'bg-green-500 text-white' : 'bg-gray-700 text-gray-400'
            }`}>
              3
            </div>
          </div>
        </div>

        {/* –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π */}
        {step === 1 && (
          <div className="space-y-6">
            <div className="bg-gray-800 rounded-xl p-6">
              <h2 className="text-xl font-semibold mb-4">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–º–µ—â–µ–Ω–∏—è</h2>
              <p className="text-gray-400 mb-6">
                –ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –æ–ø–∏—Å—å –∏–º—É—â–µ—Å—Ç–≤–∞ —Å –æ—Ü–µ–Ω–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
              </p>

              <div
                {...getRootProps()}
                className={`border-2 border-dashed rounded-xl p-8 text-center cursor-pointer transition-all ${
                  isDragActive 
                    ? 'border-green-400 bg-green-400/10' 
                    : 'border-gray-600 hover:border-gray-500'
                }`}
              >
                <input {...getInputProps()} />
                <Upload className="w-12 h-12 mx-auto mb-4 text-gray-400" />
                {isDragActive ? (
                  <p className="text-green-400">–û—Ç–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã –∑–¥–µ—Å—å...</p>
                ) : (
                  <div>
                    <p className="text-lg font-medium mb-2">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å—é–¥–∞</p>
                    <p className="text-gray-400">–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤</p>
                    <p className="text-sm text-gray-500 mt-2">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG, WebP</p>
                  </div>
                )}
              </div>

              {/* –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ */}
              {uploadedPhotos.length > 0 && (
                <div className="mt-6">
                  <h3 className="text-lg font-medium mb-4">–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ({uploadedPhotos.length})</h3>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    {uploadedPhotos.map((file, index) => (
                      <div key={index} className="relative group">
                        <img
                          src={URL.createObjectURL(file)}
                          alt={`–§–æ—Ç–æ ${index + 1}`}
                          className="w-full h-24 object-cover rounded-lg"
                        />
                        <button
                          onClick={() => removePhoto(index)}
                          className="absolute top-1 right-1 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
                        >
                          <Trash2 className="w-3 h-3" />
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              <div className="mt-6 flex gap-4">
                <button
                  onClick={onBack}
                  className="px-6 py-3 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
                >
                  –ù–∞–∑–∞–¥
                </button>
                <button
                  onClick={analyzePhotos}
                  disabled={isAnalyzing}
                  className="px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {isAnalyzing ? (
                    <>
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                      –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...
                    </>
                  ) : (
                    <>
                      <CheckCircle className="w-4 h-4" />
                      –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        )}

        {/* –®–∞–≥ 2: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ */}
        {step === 2 && (
          <div className="space-y-6">
            <div className="bg-gray-800 rounded-xl p-6">
              <div className="flex items-center justify-between mb-6">
                <div>
                  <h2 className="text-xl font-semibold">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ò–ò-–∞–Ω–∞–ª–∏–∑–∞</h2>
                  <p className="text-gray-400">–ù–∞–π–¥–µ–Ω–æ {inventoryItems.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –æ–±—â—É—é —Å—É–º–º—É {totalValue.toLocaleString()} ‚ÇΩ</p>
                </div>
                <div className="text-right">
                  <div className="text-2xl font-bold text-green-400">{totalValue.toLocaleString()} ‚ÇΩ</div>
                  <div className="text-sm text-gray-400">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</div>
                </div>
              </div>

              <div className="space-y-4">
                {inventoryItems.map((item) => (
                  <div key={item.id} className="bg-gray-700 rounded-lg p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <h3 className="font-medium">{item.name}</h3>
                          <span className={`px-2 py-1 rounded text-xs font-medium ${getConditionColor(item.condition)}`}>
                            {getConditionText(item.condition)}
                          </span>
                          <span className={`text-xs ${getConfidenceColor(item.confidence)}`}>
                            {item.confidence}% —Ç–æ—á–Ω–æ—Å—Ç—å
                          </span>
                        </div>
                        <p className="text-gray-400 text-sm mb-2">{item.description}</p>
                        <div className="flex items-center gap-4 text-sm">
                          <span className="text-gray-400">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.category}</span>
                          <span className="text-green-400 font-medium">{item.estimatedValue.toLocaleString()} ‚ÇΩ</span>
                        </div>
                      </div>
                      <div className="flex gap-2">
                        <button
                          onClick={() => editItem(item)}
                          className="p-2 bg-blue-500 hover:bg-blue-600 rounded-lg transition-colors"
                        >
                          <Edit3 className="w-4 h-4" />
                        </button>
                        <button className="p-2 bg-gray-600 hover:bg-gray-500 rounded-lg transition-colors">
                          <Eye className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              <div className="mt-6 flex gap-4">
                <button
                  onClick={() => setStep(1)}
                  className="px-6 py-3 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
                >
                  –ù–∞–∑–∞–¥
                </button>
                <button
                  onClick={async () => {
                    try {
                      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage
                      const token = localStorage.getItem('token')
                      if (!token) {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∫–Ω–æ–ø–∫–æ–π –≤—Ö–æ–¥–∞
                        const shouldLogin = confirm('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É\n\n–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞?')
                        if (shouldLogin) {
                          window.location.href = '/login'
                        }
                        return
                      }

                      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–∫—Ç–∞
                      const response = await fetch('/api/inventory/generate', {
                        method: 'POST',
                        headers: {
                          'Content-Type': 'application/json',
                          'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify({
                          inventoryItems,
                          propertyData: {
                            title: '–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
                            address: '–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞',
                            type: '–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞',
                            area: '–ü–ª–æ—â–∞–¥—å'
                          }
                        })
                      })

                      if (!response.ok) {
                        if (response.status === 401) {
                          // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
                          localStorage.removeItem('token')
                          const shouldLogin = confirm('‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞\n\n–•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ?')
                          if (shouldLogin) {
                            window.location.href = '/login'
                          }
                          return
                        }
                        throw new Error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∞')
                      }

                      const result = await response.json()
                      const act = result.data

                      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø —Å —É—Å–ø–µ—Ö–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                      const shouldDownload = confirm('‚úÖ –û–ø–∏—Å—å –∏–º—É—â–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ' + inventoryItems.length + '\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ' + totalValue.toLocaleString() + ' ‚ÇΩ\n\n–•–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å –∞–∫—Ç –ø—Ä–∏–µ–º–∞-–ø–µ—Ä–µ–¥–∞—á–∏?')
                      
                      if (shouldDownload) {
                        downloadAct(act.content, act.fileName)
                      }
                      
                      onComplete(inventoryItems)
                    } catch (error) {
                      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∞:', error)
                      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
                    }
                  }}
                  className="px-6 py-3 bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 rounded-lg transition-all flex items-center gap-2"
                >
                  <CheckCircle className="w-4 h-4" />
                  –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–∏—Å—å
                </button>
              </div>
            </div>
          </div>
        )}

        {/* –®–∞–≥ 3: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ */}
        {step === 3 && selectedItem && (
          <div className="space-y-6">
            <div className="bg-gray-800 rounded-xl p-6">
              <h2 className="text-xl font-semibold mb-6">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞</h2>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                  <input
                    type="text"
                    value={selectedItem.name}
                    onChange={(e) => setSelectedItem({...selectedItem, name: e.target.value})}
                    className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg focus:border-blue-500 focus:outline-none"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">–°–æ—Å—Ç–æ—è–Ω–∏–µ</label>
                  <select
                    value={selectedItem.condition}
                    onChange={(e) => setSelectedItem({...selectedItem, condition: e.target.value as any})}
                    className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg focus:border-blue-500 focus:outline-none text-white"
                  >
                    <option value="excellent">–û—Ç–ª–∏—á–Ω–æ–µ</option>
                    <option value="good">–•–æ—Ä–æ—à–µ–µ</option>
                    <option value="fair">–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ</option>
                    <option value="poor">–ü–ª–æ—Ö–æ–µ</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">–û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)</label>
                  <input
                    type="number"
                    value={selectedItem.estimatedValue}
                    onChange={(e) => setSelectedItem({...selectedItem, estimatedValue: parseInt(e.target.value)})}
                    className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg focus:border-blue-500 focus:outline-none"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                  <input
                    type="text"
                    value={selectedItem.category}
                    onChange={(e) => setSelectedItem({...selectedItem, category: e.target.value})}
                    className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg focus:border-blue-500 focus:outline-none"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                  <textarea
                    value={selectedItem.description}
                    onChange={(e) => setSelectedItem({...selectedItem, description: e.target.value})}
                    rows={3}
                    className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg focus:border-blue-500 focus:outline-none"
                  />
                </div>
              </div>

              <div className="mt-6 flex gap-4">
                <button
                  onClick={() => setStep(2)}
                  className="px-6 py-3 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button
                  onClick={() => saveItem(selectedItem)}
                  className="px-6 py-3 bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 rounded-lg transition-all"
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
} 