import bcryptjs from 'bcryptjs'
import { PrismaClient, User } from '@prisma/client'

const prisma = new PrismaClient()

// –¢–∏–ø—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export interface SimpleAuthUser {
  id: string
  email: string
  firstName: string
  lastName: string
  role: string
  verified: boolean
}

export interface SimpleLoginResult {
  success: boolean
  user?: SimpleAuthUser
  message: string
}

export interface SimpleRegisterResult {
  success: boolean
  user?: SimpleAuthUser
  message: string
}

// –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
export async function hashPassword(password: string): Promise<string> {
  const saltRounds = 12
  return bcryptjs.hash(password, saltRounds)
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
export async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {
  return bcryptjs.compare(password, hashedPassword)
}

// –ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
export async function simpleLogin(
  email: string,
  password: string
): Promise<SimpleLoginResult> {
  try {
    console.log('üîç –ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è:', email)
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { email }
    })

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return {
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isValidPassword = await verifyPassword(password, user.password)
    console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è:', isValidPassword ? '—É—Å–ø–µ—à–Ω–æ' : '–Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
    
    if (!isValidPassword) {
      return {
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'
      }
    }

    const authUser: SimpleAuthUser = {
      id: user.id,
      email: user.email,
      firstName: user.firstName,
      lastName: user.lastName,
      role: user.role,
      verified: user.verified
    }

    console.log('‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', authUser.email)

    return {
      success: true,
      user: authUser,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥'
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
    return {
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    }
  }
}

// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
export async function simpleRegister(
  email: string,
  password: string,
  firstName: string,
  lastName: string,
  phone?: string
): Promise<SimpleRegisterResult> {
  try {
    console.log('üîç –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è:', email)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await prisma.user.findUnique({
      where: { email }
    })

    if (existingUser) {
      return {
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      }
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await hashPassword(password)

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.create({
      data: {
        email,
        password: hashedPassword,
        firstName,
        lastName,
        phone
      }
    })

    const authUser: SimpleAuthUser = {
      id: user.id,
      email: user.email,
      firstName: user.firstName,
      lastName: user.lastName,
      role: user.role,
      verified: user.verified
    }

    console.log('‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', authUser.email)

    return {
      success: true,
      user: authUser,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
    return {
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
export async function checkUserExists(email: string): Promise<boolean> {
  try {
    const user = await prisma.user.findUnique({
      where: { email }
    })
    return !!user
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
    return false
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
export async function getUserByEmail(email: string): Promise<SimpleAuthUser | null> {
  try {
    const user = await prisma.user.findUnique({
      where: { email }
    })

    if (!user) return null

    return {
      id: user.id,
      email: user.email,
      firstName: user.firstName,
      lastName: user.lastName,
      role: user.role,
      verified: user.verified
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
    return null
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
export async function getAllUsers(): Promise<SimpleAuthUser[]> {
  try {
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
        role: true,
        verified: true
      }
    })
    return users
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
    return []
  }
} 