import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', params.id)
    
    const property = await prisma.property.findUnique({
      where: {
        id: params.id
      },
      include: {
        user: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            email: true
          }
        }
      }
    })

    if (!property) {
      console.log('‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', params.id)
      return NextResponse.json(
        { success: false, error: '–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      )
    }

    console.log('‚úÖ –û–±—ä–µ–∫—Ç –Ω–∞–π–¥–µ–Ω:', property.title)
    return NextResponse.json({
      success: true,
      data: property
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞:', error)
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}

export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log('üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', params.id)
    
    const body = await request.json()
    
    const property = await prisma.property.update({
      where: {
        id: params.id
      },
      data: {
        title: body.title,
        description: body.description,
        type: body.type,
        address: body.address,
        price: body.price || body.pricePerMonth || 0,
        bedrooms: body.bedrooms,
        bathrooms: body.bathrooms,
        area: body.area,
        features: body.features || []
      }
    })

    console.log('‚úÖ –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:', property.title)
    return NextResponse.json({
      success: true,
      data: property
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞:', error)
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log('üîç –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', params.id)
    
    await prisma.property.delete({
      where: {
        id: params.id
      }
    })

    console.log('‚úÖ –û–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω:', params.id)
    return NextResponse.json({
      success: true,
      message: '–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞:', error)
    return NextResponse.json(
      { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
} 