import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { verifyPassword } from '@/lib/auth'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { email, password } = body

    console.log('üîç –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è:', email)

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.$connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ')

    // 2. –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { email }
    })

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return NextResponse.json({
        success: false,
        step: 'user_not_found',
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      })
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', {
      id: user.id,
      email: user.email,
      firstName: user.firstName,
      lastName: user.lastName,
      role: user.role,
      verified: user.verified
    })

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isValidPassword = await verifyPassword(password, user.password)
    console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è:', isValidPassword ? '—É—Å–ø–µ—à–Ω–æ' : '–Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')

    if (!isValidPassword) {
      return NextResponse.json({
        success: false,
        step: 'invalid_password',
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'
      })
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
    console.log('üîç –î–µ—Ç–∞–ª–∏ –ø–∞—Ä–æ–ª—è:', {
      providedPassword: password,
      hashedPasswordLength: user.password.length,
      hashedPasswordStart: user.password.substring(0, 10) + '...'
    })

    return NextResponse.json({
      success: true,
      message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
      user: {
        id: user.id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role,
        verified: user.verified
      }
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ:', error)
    return NextResponse.json({
      success: false,
      step: 'error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏',
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 })
  } finally {
    await prisma.$disconnect()
  }
} 