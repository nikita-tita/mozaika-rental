import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function testInsuranceSystem() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è...\n')

  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
    const user = await prisma.user.upsert({
      where: { email: 'test-insurance@example.com' },
      update: {},
      create: {
        email: 'test-insurance@example.com',
        password: 'hashedpassword',
        firstName: '–¢–µ—Å—Ç',
        lastName: '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ',
        role: 'REALTOR'
      }
    })
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${user.firstName} ${user.lastName}`)

    // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    console.log('\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...')
    const property = await prisma.property.create({
      data: {
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –¥–ª—è —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è',
        description: '–ö–≤–∞—Ä—Ç–∏—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è',
        type: 'APARTMENT',
        address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1, –∫–≤. 1',
        area: 50.5,
        bedrooms: 2,
        bathrooms: 1,
        price: 50000,
        features: ['–ë–∞–ª–∫–æ–Ω', '–õ–æ–¥–∂–∏—è'],
        images: [],
        userId: user.id
      }
    })
    console.log(`‚úÖ –û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: ${property.title}`)

    // 3. –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –ø–æ–ª–∏—Å–æ–≤
    console.log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –ø–æ–ª–∏—Å–æ–≤...')
    
    const policies = [
      {
        type: 'PROPERTY',
        insuredAmount: 2000000,
        deductible: 100000,
        premium: 30000,
        startDate: new Date(),
        endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1 –≥–æ–¥
        insuranceCompany: '–†–æ—Å–≥–æ—Å—Å—Ç—Ä–∞—Ö',
        propertyId: property.id
      },
      {
        type: 'LIABILITY',
        insuredAmount: 1000000,
        deductible: 50000,
        premium: 15000,
        startDate: new Date(),
        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 –¥–Ω–µ–π (–∏—Å—Ç–µ–∫–∞–µ—Ç —Å–∫–æ—Ä–æ)
        insuranceCompany: '–ê–ª—å—Ñ–∞–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ',
        propertyId: property.id
      },
      {
        type: 'COMPREHENSIVE',
        insuredAmount: 5000000,
        deductible: 200000,
        premium: 75000,
        startDate: new Date(),
        endDate: new Date(Date.now() + 180 * 24 * 60 * 60 * 1000), // 6 –º–µ—Å—è—Ü–µ–≤
        insuranceCompany: '–°–±–µ—Ä–±–∞–Ω–∫ –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ',
        propertyId: property.id
      }
    ]

    const createdPolicies = []
    for (const policyData of policies) {
      const policyNumber = `POL-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`
      
      const policy = await prisma.insurancePolicy.create({
        data: {
          policyNumber,
          ...policyData,
          userId: user.id
        }
      })
      createdPolicies.push(policy)
      console.log(`‚úÖ –ü–æ–ª–∏—Å —Å–æ–∑–¥–∞–Ω: ${policy.policyNumber} (${policy.type})`)
    }

    // 4. –û–ø–ª–∞—á–∏–≤–∞–µ–º –æ–¥–∏–Ω –ø–æ–ª–∏—Å
    console.log('\n4. –û–ø–ª–∞—Ç–∞ –ø–æ–ª–∏—Å–∞...')
    const policyToPay = createdPolicies[0]
    const payment = await prisma.insurancePayment.create({
      data: {
        amount: policyToPay.premium,
        status: 'PAID',
        paymentMethod: 'CARD',
        transactionId: `TXN-${Date.now()}`,
        paidAt: new Date(),
        policyId: policyToPay.id
      }
    })

    await prisma.insurancePolicy.update({
      where: { id: policyToPay.id },
      data: { status: 'ACTIVE' }
    })

    console.log(`‚úÖ –ü–æ–ª–∏—Å ${policyToPay.policyNumber} –æ–ø–ª–∞—á–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`)

    // 5. –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
    console.log('\n5. –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏...')
    const expiringPolicy = createdPolicies[1] // –í—Ç–æ—Ä–æ–π –ø–æ–ª–∏—Å –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π
    const daysUntilExpiry = Math.ceil(
      (new Date(expiringPolicy.endDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)
    )

    const notification = await prisma.notification.create({
      data: {
        title: '–ü–æ–ª–∏—Å —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–∞–µ—Ç',
        message: `–ü–æ–ª–∏—Å ${expiringPolicy.policyNumber} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysUntilExpiry} –¥–Ω–µ–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ.`,
        type: 'WARNING',
        userId: user.id,
        policyId: expiringPolicy.id
      }
    })
    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–ª–∏—Å–∞ ${expiringPolicy.policyNumber}`)

    // 6. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ö–æ–≤–æ–π —Å–ª—É—á–∞–π
    console.log('\n6. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ —Å–ª—É—á–∞—è...')
    const claim = await prisma.insuranceClaim.create({
      data: {
        claimNumber: `CLM-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`,
        description: '–ó–∞—Ç–æ–ø–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å–æ—Å–µ–¥—è–º–∏',
        amount: 150000,
        status: 'SUBMITTED',
        incidentDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        policyId: policyToPay.id
      }
    })
    console.log(`‚úÖ –°—Ç—Ä–∞—Ö–æ–≤–æ–π —Å–ª—É—á–∞–π —Å–æ–∑–¥–∞–Ω: ${claim.claimNumber}`)

    // 7. –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\n7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è:')
    
    const allPolicies = await prisma.insurancePolicy.findMany({
      where: { userId: user.id },
      include: {
        property: true,
        payments: true,
        claims: true
      }
    })

    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª–∏—Å–æ–≤: ${allPolicies.length}`)
    console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª–∏—Å–æ–≤: ${allPolicies.filter(p => p.status === 'ACTIVE').length}`)
    console.log(`üìä –ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: ${allPolicies.filter(p => p.status === 'DRAFT').length}`)
    console.log(`üìä –ò—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–ª–∏—Å–æ–≤: ${allPolicies.filter(p => {
      const days = Math.ceil((new Date(p.endDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))
      return days <= 30 && days > 0
    }).length}`)
    
    const totalPremium = allPolicies.reduce((sum, p) => sum + p.premium, 0)
    console.log(`üí∞ –û–±—â–∞—è –ø—Ä–µ–º–∏—è: ${totalPremium.toLocaleString('ru-RU')} ‚ÇΩ`)

    const notifications = await prisma.notification.findMany({
      where: { userId: user.id }
    })
    console.log(`üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${notifications.length}`)

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
    console.log('\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:')
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}`)
    console.log(`üè† –û–±—ä–µ–∫—Ç: ${property.title}`)
    console.log(`üìÑ –ü–æ–ª–∏—Å—ã: ${allPolicies.map(p => p.policyNumber).join(', ')}`)
    console.log(`üí≥ –ü–ª–∞—Ç–µ–∂–∏: ${payment.transactionId}`)
    console.log(`üìã –°—Ç—Ä–∞—Ö–æ–≤–æ–π —Å–ª—É—á–∞–π: ${claim.claimNumber}`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testInsuranceSystem() 