import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'
import jwt from 'jsonwebtoken'

const prisma = new PrismaClient()
const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-here'

interface TestResult {
  scenario: string
  success: boolean
  error?: string
  details?: any
}

class ComprehensiveTester {
  private results: TestResult[] = []
  private testUsers: any[] = []
  private testProperties: any[] = []
  private testClients: any[] = []

  async runAllTests() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...')
    
    try {
      await this.setupTestData()
      await this.runAuthenticationTests()
      await this.runPropertyManagementTests()
      await this.runClientManagementTests()
      await this.runDealManagementTests()
      await this.runContractTests()
      await this.runPaymentTests()
      await this.runSecurityTests()
      await this.runPerformanceTests()
      await this.runEdgeCaseTests()
      await this.runUserExperienceTests()
      
      this.printResults()
  } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
    } finally {
      await this.cleanup()
      await prisma.$disconnect()
    }
  }

  private async setupTestData() {
    console.log('üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = [
      { email: 'realtor1@test.com', firstName: '–ê–Ω–Ω–∞', lastName: '–ü–µ—Ç—Ä–æ–≤–∞', role: 'REALTOR' },
      { email: 'realtor2@test.com', firstName: '–ò–≤–∞–Ω', lastName: '–°–∏–¥–æ—Ä–æ–≤', role: 'REALTOR' },
      { email: 'admin@test.com', firstName: '–ê–¥–º–∏–Ω', lastName: '–ê–¥–º–∏–Ω–æ–≤', role: 'ADMIN' },
      { email: 'client@test.com', firstName: '–ö–ª–∏–µ–Ω—Ç', lastName: '–ö–ª–∏–µ–Ω—Ç–æ–≤', role: 'CLIENT' }
    ]

    for (const userData of users) {
      const hashedPassword = await bcrypt.hash('password123', 10)
      const user = await prisma.user.create({
        data: {
          ...userData,
          password: hashedPassword,
          verified: true
        }
      })
      this.testUsers.push(user)
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${this.testUsers.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)
  }

  private async runAuthenticationTests() {
    console.log('\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...')

    // –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.testScenario('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
      const userData = {
        email: 'newuser@test.com',
        password: 'password123',
        firstName: '–ù–æ–≤—ã–π',
        lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        phone: '+7 (999) 123-45-67'
      }

      const hashedPassword = await bcrypt.hash(userData.password, 10)
      const user = await prisma.user.create({
        data: {
          ...userData,
          password: hashedPassword
        }
      })

      return { userId: user.id, email: user.email }
    })

    // –¢–µ—Å—Ç 2: –í—Ö–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await this.testScenario('–í—Ö–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', async () => {
      const user = this.testUsers[0]
      const password = 'password123'
      const isValid = await bcrypt.compare(password, user.password)
      
      if (!isValid) throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
      
      const token = jwt.sign(
        { userId: user.id, email: user.email, role: user.role },
        JWT_SECRET,
        { expiresIn: '30d' }
      )

      return { token, user: { id: user.id, email: user.email } }
    })

    // –¢–µ—Å—Ç 3: –í—Ö–æ–¥ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    await this.testScenario('–í—Ö–æ–¥ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º', async () => {
      const user = this.testUsers[0]
      const wrongPassword = 'wrongpassword'
      const isValid = await bcrypt.compare(wrongPassword, user.password)
      
      if (isValid) throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–º')
      
      return { success: false, expected: true }
    })

    // –¢–µ—Å—Ç 4: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email
    await this.testScenario('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email', async () => {
      const existingUser = this.testUsers[0]
      
      try {
        const hashedPassword = await bcrypt.hash('password123', 10)
        await prisma.user.create({
          data: {
            email: existingUser.email,
            password: hashedPassword,
            firstName: '–î—É–±–ª–∏–∫–∞—Ç',
            lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
          }
        })
        throw new Error('–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞')
      } catch (error: any) {
        if (error.code === 'P2002') {
          return { success: true, error: '–î—É–±–ª–∏–∫–∞—Ç email –æ–±–Ω–∞—Ä—É–∂–µ–Ω' }
        }
        throw error
      }
    })

    // –¢–µ—Å—Ç 5: –í–∞–ª–∏–¥–∞—Ü–∏—è email —Ñ–æ—Ä–º–∞—Ç–∞
    await this.testScenario('–í–∞–ª–∏–¥–∞—Ü–∏—è email —Ñ–æ—Ä–º–∞—Ç–∞', async () => {
      const invalidEmails = ['invalid', 'test@', '@test.com', 'test..test@test.com']
      
      for (const email of invalidEmails) {
        try {
          const hashedPassword = await bcrypt.hash('password123', 10)
          await prisma.user.create({
            data: {
              email,
              password: hashedPassword,
              firstName: '–¢–µ—Å—Ç',
              lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            }
          })
          throw new Error(`Email ${email} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º`)
        } catch (error) {
          // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É
        }
      }
      
      return { success: true, testedEmails: invalidEmails }
    })
  }

  private async runPropertyManagementTests() {
    console.log('\nüè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏...')

    // –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    await this.testScenario('–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', async () => {
      const user = this.testUsers[0]
      const propertyData = {
        title: '–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ',
        description: '–£—é—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å —Ä–µ–º–æ–Ω—Ç–æ–º',
        type: 'APARTMENT',
        address: '—É–ª. –õ–µ–Ω–∏–Ω–∞, 1, –∫–≤. 5',
        price: 50000,
        bedrooms: 2,
        bathrooms: 1,
        area: 45.5,
        features: ['–ë–∞–ª–∫–æ–Ω', '–õ–æ–¥–∂–∏—è', '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä'],
        images: []
      }

      const property = await prisma.property.create({
        data: {
          ...propertyData,
          userId: user.id
        }
      })

      this.testProperties.push(property)
      return { propertyId: property.id, title: property.title }
    })

    // –¢–µ—Å—Ç 7: –°–æ–∑–¥–∞–Ω–∏–µ 100 –æ–±—ä–µ–∫—Ç–æ–≤ (—Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
    await this.testScenario('–°–æ–∑–¥–∞–Ω–∏–µ 100 –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', async () => {
      const user = this.testUsers[0]
      const startTime = Date.now()
      
      for (let i = 1; i <= 100; i++) {
        const property = await prisma.property.create({
          data: {
            title: `–ö–≤–∞—Ä—Ç–∏—Ä–∞ ${i}`,
            description: `–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã ${i}`,
            type: 'APARTMENT',
            address: `—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, ${i}`,
            price: 30000 + (i * 1000),
            bedrooms: (i % 3) + 1,
            bathrooms: (i % 2) + 1,
            area: 30 + (i * 2),
            features: ['–ë–∞–∑–æ–≤—ã–µ —É–¥–æ–±—Å—Ç–≤–∞'],
            images: [],
            userId: user.id
          }
        })
        this.testProperties.push(property)
      }

      const endTime = Date.now()
      const duration = endTime - startTime
      
      return { 
        count: 100, 
        duration: `${duration}ms`, 
        avgTime: `${duration / 100}ms per property` 
      }
    })

    // –¢–µ—Å—Ç 8: –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
    await this.testScenario('–ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º', async () => {
      const user = this.testUsers[0]
      
      // –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É
      const apartments = await prisma.property.findMany({
        where: {
          userId: user.id,
          type: 'APARTMENT'
        }
      })

      // –ü–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ
      const expensiveProperties = await prisma.property.findMany({
      where: { 
          userId: user.id,
          price: {
            gte: 50000
          }
        }
      })

      return { 
        apartments: apartments.length, 
        expensive: expensiveProperties.length 
      }
    })

    // –¢–µ—Å—Ç 9: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    await this.testScenario('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', async () => {
      const property = this.testProperties[0]
      const newPrice = 55000
      const newDescription = '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ'

      const updatedProperty = await prisma.property.update({
        where: { id: property.id },
        data: {
          price: newPrice,
          description: newDescription
        }
      })

      return { 
        oldPrice: property.price, 
        newPrice: updatedProperty.price,
        description: updatedProperty.description 
      }
    })

    // –¢–µ—Å—Ç 10: –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    await this.testScenario('–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', async () => {
      const propertyToDelete = this.testProperties[this.testProperties.length - 1]
      
      await prisma.property.delete({
        where: { id: propertyToDelete.id }
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω
      const deletedProperty = await prisma.property.findUnique({
        where: { id: propertyToDelete.id }
      })

      if (deletedProperty) {
        throw new Error('–û–±—ä–µ–∫—Ç –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω')
      }

      return { deletedId: propertyToDelete.id }
    })
  }

  private async runClientManagementTests() {
    console.log('\nüë• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏...')

    // –¢–µ—Å—Ç 11: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    await this.testScenario('–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞', async () => {
      const user = this.testUsers[0]
      const clientData = {
        firstName: '–ê–ª–µ–∫—Å–µ–π',
        lastName: '–ò–≤–∞–Ω–æ–≤',
        middleName: '–ü–µ—Ç—Ä–æ–≤–∏—á',
        email: 'alexey@test.com',
        phone: '+7 (999) 111-22-33',
        type: 'TENANT',
        passport: '1234 567890',
        snils: '123-456-789 01',
        inn: '123456789012',
        address: '—É–ª. –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è, 1',
        city: '–ú–æ—Å–∫–≤–∞',
        notes: '–•–æ—Ä–æ—à–∏–π –∫–ª–∏–µ–Ω—Ç',
        source: '–°–∞–π—Ç'
      }

      const client = await prisma.client.create({
        data: {
          ...clientData,
          userId: user.id
        }
      })

      this.testClients.push(client)
      return { clientId: client.id, name: `${client.firstName} ${client.lastName}` }
    })

    // –¢–µ—Å—Ç 12: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await this.testScenario('–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', async () => {
      const user = this.testUsers[0]
      const clientData = {
        firstName: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π',
        lastName: '–ö–ª–∏–µ–Ω—Ç',
        phone: '+7 (999) 000-00-00'
      }

      const client = await prisma.client.create({
        data: {
          ...clientData,
          userId: user.id
        }
      })

      this.testClients.push(client)
      return { clientId: client.id, hasEmail: !!client.email }
    })

    // –¢–µ—Å—Ç 13: –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
    await this.testScenario('–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º', async () => {
      const user = this.testUsers[0]
      
      // –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É
      const tenants = await prisma.client.findMany({
        where: {
          userId: user.id,
          type: 'TENANT'
        }
      })

      // –ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É
      const moscowClients = await prisma.client.findMany({
        where: {
          userId: user.id,
          city: '–ú–æ—Å–∫–≤–∞'
        }
      })

      return { tenants: tenants.length, moscowClients: moscowClients.length }
    })

    // –¢–µ—Å—Ç 14: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
    await this.testScenario('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞', async () => {
      const client = this.testClients[0]
      const newPhone = '+7 (999) 999-99-99'
      const newNotes = '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏'

      const updatedClient = await prisma.client.update({
        where: { id: client.id },
        data: {
          phone: newPhone,
          notes: newNotes
        }
      })

      return { 
        oldPhone: client.phone, 
        newPhone: updatedClient.phone,
        notes: updatedClient.notes 
      }
    })
  }

  private async runDealManagementTests() {
    console.log('\nü§ù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∞–º–∏...')

    // –¢–µ—Å—Ç 15: –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    await this.testScenario('–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏', async () => {
      const user = this.testUsers[0]
      const client = this.testClients[0]
      const property = this.testProperties[0]

      const dealData = {
        title: '–ê—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ —Ü–µ–Ω—Ç—Ä–µ',
        description: '–°–¥–µ–ª–∫–∞ –ø–æ –∞—Ä–µ–Ω–¥–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
        status: 'NEW',
        amount: 50000,
        startDate: new Date(),
        endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // +1 –≥–æ–¥
        clientId: client.id,
        propertyId: property.id
      }

      const deal = await prisma.deal.create({
        data: {
          ...dealData,
          userId: user.id
        }
      })

      return { dealId: deal.id, title: deal.title, amount: deal.amount }
    })

    // –¢–µ—Å—Ç 16: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏
    await this.testScenario('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏', async () => {
      const deal = await prisma.deal.findFirst()
      if (!deal) throw new Error('–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

      const updatedDeal = await prisma.deal.update({
        where: { id: deal.id },
        data: { status: 'IN_PROGRESS' }
      })

      return { 
        oldStatus: deal.status, 
        newStatus: updatedDeal.status 
      }
    })

    // –¢–µ—Å—Ç 17: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    await this.testScenario('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏', async () => {
      const deal = await prisma.deal.findFirst({
        where: { status: 'IN_PROGRESS' }
      })
      if (!deal) throw new Error('–°–¥–µ–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

      const completedDeal = await prisma.deal.update({
        where: { id: deal.id },
        data: { status: 'COMPLETED' }
      })

      return { 
        dealId: completedDeal.id, 
        status: completedDeal.status 
      }
    })
  }

  private async runContractTests() {
    console.log('\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...')

    // –¢–µ—Å—Ç 18: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    await this.testScenario('–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞', async () => {
      const user = this.testUsers[0]
      const deal = await prisma.deal.findFirst()
      
      const contractData = {
        title: '–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã',
        content: '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –∞—Ä–µ–Ω–¥—ã...',
        status: 'DRAFT',
        dealId: deal?.id,
        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // +30 –¥–Ω–µ–π
      }

      const contract = await prisma.contract.create({
        data: {
          ...contractData,
          userId: user.id
        }
      })

      return { contractId: contract.id, title: contract.title }
    })

    // –¢–µ—Å—Ç 19: –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    await this.testScenario('–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞', async () => {
      const contract = await prisma.contract.findFirst({
        where: { status: 'DRAFT' }
      })
      if (!contract) throw new Error('–ß–µ—Ä–Ω–æ–≤–∏–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω')

      const signedContract = await prisma.contract.update({
        where: { id: contract.id },
        data: { 
          status: 'SIGNED',
          signedAt: new Date()
        }
      })

      return { 
        contractId: signedContract.id, 
        status: signedContract.status,
        signedAt: signedContract.signedAt 
      }
    })
  }

  private async runPaymentTests() {
    console.log('\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π...')

    // –¢–µ—Å—Ç 20: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    await this.testScenario('–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞', async () => {
      const user = this.testUsers[0]
      const deal = await prisma.deal.findFirst()
      
      const paymentData = {
        type: 'RENT',
        status: 'PENDING',
        amount: 50000,
        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // +7 –¥–Ω–µ–π
        dealId: deal?.id
      }

      const payment = await prisma.payment.create({
        data: {
          ...paymentData,
          userId: user.id
        }
      })

      return { paymentId: payment.id, amount: payment.amount, type: payment.type }
    })

    // –¢–µ—Å—Ç 21: –û–ø–ª–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞
    await this.testScenario('–û–ø–ª–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞', async () => {
      const payment = await prisma.payment.findFirst({
        where: { status: 'PENDING' }
      })
      if (!payment) throw new Error('–û–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω')

      const paidPayment = await prisma.payment.update({
        where: { id: payment.id },
        data: { 
          status: 'PAID',
          paidAt: new Date()
        }
      })

      return { 
        paymentId: paidPayment.id, 
        status: paidPayment.status,
        paidAt: paidPayment.paidAt 
      }
    })
  }

  private async runSecurityTests() {
    console.log('\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...')

    // –¢–µ—Å—Ç 22: –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–∏–º –¥–∞–Ω–Ω—ã–º
    await this.testScenario('–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–∏–º –¥–∞–Ω–Ω—ã–º', async () => {
      const user1 = this.testUsers[0]
      const user2 = this.testUsers[1]

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è user1
      const property = await prisma.property.create({
        data: {
          title: '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç',
          type: 'APARTMENT',
          address: '—É–ª. –ü—Ä–∏–≤–∞—Ç–Ω–∞—è, 1',
          price: 100000,
          userId: user1.id
        }
      })

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç user1 –æ—Ç –∏–º–µ–Ω–∏ user2
      const unauthorizedAccess = await prisma.property.findMany({
        where: {
          userId: user1.id
        }
      })

      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ API
      return { 
        propertyId: property.id, 
        unauthorizedCount: unauthorizedAccess.length 
      }
    })

    // –¢–µ—Å—Ç 23: –í–∞–ª–∏–¥–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
    await this.testScenario('–í–∞–ª–∏–¥–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞', async () => {
      const user = this.testUsers[0]
      
      // –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
      const validToken = jwt.sign(
        { userId: user.id, email: user.email, role: user.role },
        JWT_SECRET,
        { expiresIn: '30d' }
      )

      // –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
      const invalidToken = 'invalid.token.here'

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
      const validDecoded = jwt.verify(validToken, JWT_SECRET)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
      let invalidDecoded = null
      try {
        invalidDecoded = jwt.verify(invalidToken, JWT_SECRET)
      } catch (error) {
        // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É
      }

      return { 
        validToken: !!validDecoded, 
        invalidToken: !invalidDecoded 
      }
    })

    // –¢–µ—Å—Ç 24: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
    await this.testScenario('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è', async () => {
      const weakPasswords = ['123', 'password', 'qwerty', 'abc123']
      const strongPasswords = ['StrongPass123!', 'MySecureP@ssw0rd', 'Complex123!@#']
      
      const weakResults = []
      const strongResults = []

      for (const password of weakPasswords) {
        const hashed = await bcrypt.hash(password, 10)
        const isValid = await bcrypt.compare(password, hashed)
        weakResults.push({ password, isValid })
      }

      for (const password of strongPasswords) {
        const hashed = await bcrypt.hash(password, 10)
        const isValid = await bcrypt.compare(password, hashed)
        strongResults.push({ password, isValid })
      }

      return { 
        weakPasswords: weakResults.length, 
        strongPasswords: strongResults.length 
      }
    })
  }

  private async runPerformanceTests() {
    console.log('\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...')

    // –¢–µ—Å—Ç 25: –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
    await this.testScenario('–ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤', async () => {
      const user = this.testUsers[0]
      const startTime = Date.now()
      
      for (let i = 1; i <= 50; i++) {
        await prisma.client.create({
          data: {
            firstName: `–ö–ª–∏–µ–Ω—Ç${i}`,
            lastName: `–§–∞–º–∏–ª–∏—è${i}`,
            phone: `+7 (999) ${String(i).padStart(3, '0')}-00-00`,
            userId: user.id
          }
        })
      }

      const endTime = Date.now()
      const duration = endTime - startTime
      
      return { 
        count: 50, 
        duration: `${duration}ms`, 
        avgTime: `${duration / 50}ms per client` 
      }
    })

    // –¢–µ—Å—Ç 26: –ü–æ–∏—Å–∫ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö
    await this.testScenario('–ü–æ–∏—Å–∫ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö', async () => {
      const user = this.testUsers[0]
      const startTime = Date.now()
      
    const properties = await prisma.property.findMany({
        where: { userId: user.id },
        include: {
          deals: true
        }
      })

      const endTime = Date.now()
      const duration = endTime - startTime
      
      return { 
        propertiesCount: properties.length, 
        duration: `${duration}ms` 
      }
    })
  }

  private async runEdgeCaseTests() {
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤...')

    // –¢–µ—Å—Ç 27: –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    await this.testScenario('–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è', async () => {
      const user = this.testUsers[0]
      const longTitle = 'A'.repeat(1000) // 1000 —Å–∏–º–≤–æ–ª–æ–≤
      
      try {
        const property = await prisma.property.create({
          data: {
            title: longTitle,
            type: 'APARTMENT',
            address: '—É–ª. –î–ª–∏–Ω–Ω–∞—è, 1',
            price: 100000,
            userId: user.id
          }
        })
        return { success: true, titleLength: property.title.length }
      } catch (error) {
        return { success: false, error: '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ' }
      }
    })

    // –¢–µ—Å—Ç 28: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
    await this.testScenario('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã', async () => {
      const user = this.testUsers[0]
      
      try {
        const property = await prisma.property.create({
          data: {
            title: '–û–±—ä–µ–∫—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π',
            type: 'APARTMENT',
            address: '—É–ª. –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è, 1',
            price: -1000,
            userId: user.id
          }
        })
        return { success: true, price: property.price }
      } catch (error) {
        return { success: false, error: '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞' }
      }
    })

    // –¢–µ—Å—Ç 29: –ü—É—Å—Ç—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    await this.testScenario('–ü—É—Å—Ç—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', async () => {
      const user = this.testUsers[0]
      
      try {
        const property = await prisma.property.create({
          data: {
            title: '', // –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            type: 'APARTMENT',
            address: '—É–ª. –ü—É—Å—Ç–∞—è, 1',
            price: 100000,
            userId: user.id
          }
        })
        return { success: true, title: property.title }
      } catch (error) {
        return { success: false, error: '–ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ' }
      }
    })

    // –¢–µ—Å—Ç 30: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö
    await this.testScenario('–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö', async () => {
      const user = this.testUsers[0]
      const specialTitle = '–û–±—ä–µ–∫—Ç —Å —Å–∏–º–≤–æ–ª–∞–º–∏: <script>alert("xss")</script> & "–∫–∞–≤—ã—á–∫–∏"'
      
      try {
        const property = await prisma.property.create({
          data: {
            title: specialTitle,
            type: 'APARTMENT',
            address: '—É–ª. –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è, 1',
            price: 100000,
            userId: user.id
          }
        })
        return { success: true, title: property.title }
      } catch (error) {
        return { success: false, error: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã' }
      }
    })
  }

  private async runUserExperienceTests() {
    console.log('\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞...')

    // –¢–µ—Å—Ç 31: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    await this.testScenario('–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã', async () => {
      const confusedUser = {
        email: 'confused@test.com',
        password: 'password123',
        firstName: '–ó–∞–ø—É—Ç–∞–≤—à–∏–π—Å—è',
        lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        phone: '+7 (999) 999-99-99'
      }

      const hashedPassword = await bcrypt.hash(confusedUser.password, 10)
      const user = await prisma.user.create({
        data: {
          ...confusedUser,
          password: hashedPassword
        }
      })

      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const helpProperty = await prisma.property.create({
        data: {
          title: '–ü—Ä–∏–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ (—É–¥–∞–ª–∏—Ç–µ –ø–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è)',
          description: '–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –ò–∑—É—á–∏—Ç–µ –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–∏ –æ–±—ä–µ–∫—Ç—ã.',
          type: 'APARTMENT',
          address: '—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1',
          price: 30000,
          userId: user.id
        }
      })

      const helpClient = await prisma.client.create({
        data: {
          firstName: '–ü—Ä–∏–º–µ—Ä',
          lastName: '–ö–ª–∏–µ–Ω—Ç–∞',
          phone: '+7 (999) 000-00-00',
          notes: '–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞. –ò–∑—É—á–∏—Ç–µ –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.',
          userId: user.id
        }
      })

      return { 
        userId: user.id, 
        helpPropertyId: helpProperty.id,
        helpClientId: helpClient.id 
      }
    })

    // –¢–µ—Å—Ç 32: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö
    await this.testScenario('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö', async () => {
      const user = this.testUsers[0]
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –æ—à–∏–±–∫–æ–π
      const propertyWithError = await prisma.property.create({
        data: {
          title: '–û–±—ä–µ–∫—Ç —Å –æ—à–∏–±–∫–æ–π',
          type: 'APARTMENT',
          address: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å',
          price: 100000,
          userId: user.id
        }
      })

      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
      const correctedProperty = await prisma.property.update({
        where: { id: propertyWithError.id },
        data: {
          address: '—É–ª. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è, 1',
          title: '–û–±—ä–µ–∫—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–æ–π'
        }
      })

      return { 
        originalAddress: propertyWithError.address,
        correctedAddress: correctedProperty.address,
        correctedTitle: correctedProperty.title 
      }
    })

    // –¢–µ—Å—Ç 33: –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    await this.testScenario('–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏', async () => {
      const user = this.testUsers[0]
      
      // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const properties = []
      for (let i = 1; i <= 10; i++) {
        const property = await prisma.property.create({
          data: {
            title: `–û–±—ä–µ–∫—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${i}`,
            type: 'APARTMENT',
            address: `—É–ª. –ú–∞—Å—Å–æ–≤–∞—è, ${i}`,
            price: 30000 + (i * 1000),
            userId: user.id
          }
        })
        properties.push(property)
      }

      // –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
      const updatePromises = properties.map(property =>
        prisma.property.update({
          where: { id: property.id },
          data: { status: 'MAINTENANCE' }
        })
      )

      const updatedProperties = await Promise.all(updatePromises)
      
      return { 
        updatedCount: updatedProperties.length,
        allInMaintenance: updatedProperties.every(p => p.status === 'MAINTENANCE')
      }
    })
  }

  private async testScenario(name: string, testFn: () => Promise<any>): Promise<void> {
    try {
      console.log(`  üß™ ${name}...`)
      const result = await testFn()
      this.results.push({
        scenario: name,
        success: true,
        details: result
      })
      console.log(`  ‚úÖ ${name} - –£–°–ü–ï–•`)
    } catch (error: any) {
      this.results.push({
        scenario: name,
        success: false,
        error: error.message
      })
      console.log(`  ‚ùå ${name} - –û–®–ò–ë–ö–ê: ${error.message}`)
    }
  }

  private printResults() {
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø')
    console.log('=' .repeat(50))
    
    const successful = this.results.filter(r => r.success).length
    const failed = this.results.filter(r => !r.success).length
    const total = this.results.length
    
    console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${total}`)
    console.log(`–£—Å–ø–µ—à–Ω—ã—Ö: ${successful}`)
    console.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö: ${failed}`)
    console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((successful / total) * 100).toFixed(1)}%`)
    
    if (failed > 0) {
      console.log('\n‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:')
      this.results
        .filter(r => !r.success)
        .forEach(r => {
          console.log(`  - ${r.scenario}: ${r.error}`)
        })
    }
    
    console.log('\n‚úÖ –£–°–ü–ï–®–ù–´–ï –¢–ï–°–¢–´:')
    this.results
      .filter(r => r.success)
      .forEach(r => {
        console.log(`  - ${r.scenario}`)
      })
  }

  private async cleanup() {
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await prisma.payment.deleteMany({
      where: { 
        user: {
          email: {
            contains: '@test.com'
          }
        }
      }
    })
    
    await prisma.contract.deleteMany({
      where: {
        user: {
          email: {
            contains: '@test.com'
          }
        }
      }
    })
    
    await prisma.deal.deleteMany({
      where: { 
        user: {
          email: {
            contains: '@test.com'
          }
        }
      }
    })
    
    await prisma.client.deleteMany({
      where: { 
        user: {
          email: {
            contains: '@test.com'
          }
        }
      }
    })
    
    await prisma.property.deleteMany({
      where: {
        user: {
          email: {
            contains: '@test.com'
          }
        }
      }
    })
    
    await prisma.user.deleteMany({
      where: {
        email: {
          contains: '@test.com'
        }
      }
    })
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã')
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const tester = new ComprehensiveTester()
tester.runAllTests() 