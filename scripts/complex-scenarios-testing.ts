import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

interface TestResult {
  testId: number
  name: string
  status: 'PASS' | 'FAIL' | 'PARTIAL'
  details: string
  error?: string
}

const testResults: TestResult[] = []

async function runTest(testId: number, name: string, testFn: () => Promise<boolean>, details: string) {
  try {
    console.log(`üß™ –¢–µ—Å—Ç ${testId}: ${name}`)
    const result = await testFn()
    const status = result ? 'PASS' : 'FAIL'
    testResults.push({ testId, name, status, details })
    console.log(`   ${status === 'PASS' ? '‚úÖ' : '‚ùå'} ${status}`)
    return result
  } catch (error) {
    testResults.push({ 
      testId, 
      name, 
      status: 'FAIL', 
      details, 
      error: error instanceof Error ? error.message : String(error) 
    })
    console.log(`   ‚ùå FAIL: ${error instanceof Error ? error.message : String(error)}`)
    return false
  }
}

async function complexScenariosTesting() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...\n')

  // –°—Ü–µ–Ω–∞—Ä–∏–π 1-10: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º
  await runTest(1, '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞-–∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞', async () => {
    const user = await prisma.user.findUnique({
      where: { email: 'nikitatitov070@gmail.com' }
    })
    if (!user) return false

    const newClient = await prisma.client.create({
      data: {
        firstName: '–ú–∞—Ä–∏—è',
        lastName: '–ò–≤–∞–Ω–æ–≤–∞',
        middleName: '–ü–µ—Ç—Ä–æ–≤–Ω–∞',
        email: 'maria.ivanova@test.com',
        phone: '+7 (999) 999-99-99',
        birthDate: new Date('1995-03-15'),
        type: 'TENANT',
        passport: '4513 999999',
        snils: '999-999-999 99',
        inn: '999999999999',
        address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1, –∫–≤. 1',
        city: '–ú–æ—Å–∫–≤–∞',
        notes: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞',
        source: '–¢–µ—Å—Ç',
        isActive: true,
        userId: user.id
      }
    })
    
    return newClient && newClient.firstName === '–ú–∞—Ä–∏—è' && newClient.type === 'TENANT'
  }, '–î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å—Å—è –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç-–∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏')

  await runTest(2, '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', async () => {
    const user = await prisma.user.findUnique({
      where: { email: 'nikitatitov070@gmail.com' }
    })
    if (!user) return false

    const newProperty = await prisma.property.create({
      data: {
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –¥–ª—è —Å–¥–∞—á–∏',
        type: 'APARTMENT',
        address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 2, –∫–≤. 5',
        area: 55.0,
        bedrooms: 2,
        bathrooms: 1,
        price: 95000,
        description: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å–∏—Å—Ç–µ–º—ã',
        images: ['https://via.placeholder.com/400x300/6366F1/FFFFFF?text=–¢–µ—Å—Ç–æ–≤–∞—è+–ö–≤–∞—Ä—Ç–∏—Ä–∞'],
        features: ['–¢–µ—Å—Ç–æ–≤–∞—è', '–ù–æ–≤—ã–π —Ä–µ–º–æ–Ω—Ç', '–ú–µ–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è'],
        userId: user.id
      }
    })
    
    return newProperty && newProperty.title.includes('–¢–µ—Å—Ç–æ–≤–∞—è') && newProperty.price === 95000
  }, '–î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å—Å—è –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏')

  await runTest(3, '–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –∞—Ä–µ–Ω–¥—ã', async () => {
    const user = await prisma.user.findUnique({
      where: { email: 'nikitatitov070@gmail.com' }
    })
    if (!user) return false

    const client = await prisma.client.findFirst({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        firstName: '–ú–∞—Ä–∏—è'
      }
    })
    if (!client) return false

    const newContract = await prisma.contract.create({
      data: {
        title: '–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã —Ç–µ—Å—Ç–æ–≤–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã',
        content: '–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã —Ç–µ—Å—Ç–æ–≤–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 2, –∫–≤. 5. –ê—Ä–µ–Ω–¥–Ω–∞—è –ø–ª–∞—Ç–∞: 95,000 —Ä—É–±/–º–µ—Å. –°—Ä–æ–∫: 1 –≥–æ–¥.',
        status: 'DRAFT',
        userId: user.id
      }
    })
    
    return newContract && newContract.title.includes('—Ç–µ—Å—Ç–æ–≤–æ–π') && newContract.status === 'DRAFT'
  }, '–î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å—Å—è –Ω–æ–≤—ã–π –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã')

  await runTest(4, '–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É', async () => {
    const user = await prisma.user.findUnique({
      where: { email: 'nikitatitov070@gmail.com' }
    })
    if (!user) return false

    const contract = await prisma.contract.findFirst({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        title: { contains: '—Ç–µ—Å—Ç–æ–≤–æ–π' }
      }
    })
    if (!contract) return false

    const newPayment = await prisma.payment.create({
      data: {
        amount: 95000,
        type: 'RENT',
        status: 'PENDING',
        dueDate: new Date('2024-04-15'),
        userId: user.id
      }
    })
    
    return newPayment && newPayment.amount === 95000 && newPayment.type === 'RENT'
  }, '–î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å—Å—è –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É')

  await runTest(5, '–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ', async () => {
    const user = await prisma.user.findUnique({
      where: { email: 'nikitatitov070@gmail.com' }
    })
    if (!user) return false

    const newNotification = await prisma.notification.create({
      data: {
        title: '–ù–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
        message: '–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
        type: 'INFO',
        read: false,
        userId: user.id
      }
    })
    
    return newNotification && newNotification.title.includes('—Ç–µ—Å—Ç–æ–≤—ã–π') && !newNotification.read
  }, '–î–æ–ª–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ')

  // –°—Ü–µ–Ω–∞—Ä–∏–π 6-15: –†–∞–±–æ—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  await runTest(6, '–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø—É', async () => {
    const tenants = await prisma.client.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        type: 'TENANT'
      }
    })
    const landlords = await prisma.client.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        type: 'LANDLORD'
      }
    })
    
    return tenants.length >= 2 && landlords.length >= 1
  }, '–î–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∫–ª–∏–µ–Ω—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤')

  await runTest(7, '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ü–µ–Ω–µ', async () => {
    const expensiveProperties = await prisma.property.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        price: { gte: 100000 }
      }
    })
    const affordableProperties = await prisma.property.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        price: { lt: 100000 }
      }
    })
    
    return expensiveProperties.length >= 1 && affordableProperties.length >= 2
  }, '–î–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –æ–±—ä–µ–∫—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Ü–µ–Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π')

  await runTest(8, '–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤', async () => {
    const signedContracts = await prisma.contract.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        status: 'SIGNED'
      }
    })
    const draftContracts = await prisma.contract.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        status: 'DRAFT'
      }
    })
    
    return signedContracts.length >= 1 && draftContracts.length >= 2
  }, '–î–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –¥–æ–≥–æ–≤–æ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤')

  await runTest(9, '–ê–Ω–∞–ª–∏–∑ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º', async () => {
    const paidPayments = await prisma.payment.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        status: 'PAID'
      }
    })
    const pendingPayments = await prisma.payment.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        status: 'PENDING'
      }
    })
    
    return paidPayments.length >= 2 && pendingPayments.length >= 1
  }, '–î–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–ª–∞—Ç–µ–∂–∏ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤')

  await runTest(10, '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É', async () => {
    const infoNotifications = await prisma.notification.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        type: 'INFO'
      }
    })
    const warningNotifications = await prisma.notification.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        type: 'WARNING'
      }
    })
    
    return infoNotifications.length >= 2 && warningNotifications.length >= 1
  }, '–î–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤')

  // –°—Ü–µ–Ω–∞—Ä–∏–π 11-20: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  await runTest(11, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞', async () => {
    const client = await prisma.client.findFirst({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        firstName: '–ú–∞—Ä–∏—è'
      }
    })
    if (!client) return false

    const updatedClient = await prisma.client.update({
      where: { id: client.id },
      data: { 
        notes: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ',
        phone: '+7 (999) 888-88-88'
      }
    })
    
    return updatedClient.notes === '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ' && 
           updatedClient.phone === '+7 (999) 888-88-88'
  }, '–î–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞')

  await runTest(12, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞', async () => {
    const property = await prisma.property.findFirst({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        title: { contains: '–¢–µ—Å—Ç–æ–≤–∞—è' }
      }
    })
    if (!property) return false

    const updatedProperty = await prisma.property.update({
      where: { id: property.id },
      data: { 
        price: 100000,
        description: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã'
      }
    })
    
    return updatedProperty.price === 100000 && 
           updatedProperty.description.includes('–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ')
  }, '–î–æ–ª–∂–Ω–∞ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —Ü–µ–Ω–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞')

  await runTest(13, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–≥–æ–≤–æ—Ä–∞', async () => {
    const contract = await prisma.contract.findFirst({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        title: { contains: '—Ç–µ—Å—Ç–æ–≤–æ–π' }
      }
    })
    if (!contract) return false

    const updatedContract = await prisma.contract.update({
      where: { id: contract.id },
      data: { 
        status: 'SIGNED',
        signedAt: new Date(),
        expiresAt: new Date('2025-04-15')
      }
    })
    
    return updatedContract.status === 'SIGNED' && 
           updatedContract.signedAt && 
           updatedContract.expiresAt
  }, '–î–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω—è—Ç—å—Å—è —Å—Ç–∞—Ç—É—Å –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π')

  await runTest(14, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞', async () => {
    const payment = await prisma.payment.findFirst({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        amount: 95000
      }
    })
    if (!payment) return false

    const updatedPayment = await prisma.payment.update({
      where: { id: payment.id },
      data: { 
        status: 'PAID',
        paidAt: new Date()
      }
    })
    
    return updatedPayment.status === 'PAID' && updatedPayment.paidAt
  }, '–î–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π')

  await runTest(15, '–û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ', async () => {
    const notification = await prisma.notification.findFirst({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        title: { contains: '—Ç–µ—Å—Ç–æ–≤—ã–π' }
      }
    })
    if (!notification) return false

    const updatedNotification = await prisma.notification.update({
      where: { id: notification.id },
      data: { read: true }
    })
    
    return updatedNotification.read === true
  }, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–º–µ—á–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ')

  // –°—Ü–µ–Ω–∞—Ä–∏–π 16-25: –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
  await runTest(16, '–ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤', async () => {
    const totalClients = await prisma.client.count({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    return totalClients >= 4
  }, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 4 –∫–ª–∏–µ–Ω—Ç–∞')

  await runTest(17, '–ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤', async () => {
    const totalProperties = await prisma.property.count({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    return totalProperties >= 4
  }, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 4 –æ–±—ä–µ–∫—Ç–∞')

  await runTest(18, '–ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤', async () => {
    const totalContracts = await prisma.contract.count({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    return totalContracts >= 3
  }, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 –¥–æ–≥–æ–≤–æ—Ä–∞')

  await runTest(19, '–ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–ª–∞—Ç–µ–∂–µ–π', async () => {
    const totalPayments = await prisma.payment.count({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    return totalPayments >= 4
  }, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 4 –ø–ª–∞—Ç–µ–∂–∞')

  await runTest(20, '–ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', async () => {
    const totalNotifications = await prisma.notification.count({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    return totalNotifications >= 4
  }, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 4 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')

  // –°—Ü–µ–Ω–∞—Ä–∏–π 21-30: –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  await runTest(21, '–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', async () => {
    const clients = await prisma.client.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    const clientsWithFullData = clients.filter(c => 
      c.firstName && c.lastName && c.phone && c.email && c.passport
    )
    return clientsWithFullData.length >= 2
  }, '–î–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∫–ª–∏–µ–Ω—Ç—ã —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏')

  await runTest(22, '–ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏', async () => {
    const propertiesWithDetails = await prisma.property.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        AND: [
          { images: { isEmpty: false } },
          { features: { isEmpty: false } },
          { description: { not: null } }
        ]
      }
    })
    return propertiesWithDetails.length >= 3
  }, '–î–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –æ–±—ä–µ–∫—Ç—ã —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏')

  await runTest(23, '–ü–æ–∏—Å–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å –¥–∞—Ç–∞–º–∏', async () => {
    const signedContractsWithDates = await prisma.contract.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        AND: [
          { status: 'SIGNED' },
          { signedAt: { not: null } },
          { expiresAt: { not: null } }
        ]
      }
    })
    return signedContractsWithDates.length >= 1
  }, '–î–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã —Å –¥–∞—Ç–∞–º–∏')

  await runTest(24, '–ü–æ–∏—Å–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π —Å –¥–∞—Ç–∞–º–∏', async () => {
    const paidPaymentsWithDates = await prisma.payment.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        AND: [
          { status: 'PAID' },
          { paidAt: { not: null } },
          { dueDate: { not: null } }
        ]
      }
    })
    return paidPaymentsWithDates.length >= 2
  }, '–î–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —Å –¥–∞—Ç–∞–º–∏')

  await runTest(25, '–ü–æ–∏—Å–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', async () => {
    const unreadNotifications = await prisma.notification.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        read: false
      }
    })
    return unreadNotifications.length >= 2
  }, '–î–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')

  // –°—Ü–µ–Ω–∞—Ä–∏–π 26-35: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  await runTest(26, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤', async () => {
    const clients = await prisma.client.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    const validPhones = clients.filter(c => 
      c.phone && c.phone.startsWith('+7') && c.phone.length >= 12
    )
    return validPhones.length === clients.length
  }, '–í—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏')

  await runTest(27, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ email –∞–¥—Ä–µ—Å–æ–≤', async () => {
    const clients = await prisma.client.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        email: { not: null }
      }
    })
    const validEmails = clients.filter(c => 
      c.email && c.email.includes('@') && c.email.includes('.')
    )
    return validEmails.length === clients.length
  }, '–í—Å–µ email –∞–¥—Ä–µ—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏')

  await runTest(28, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ü–µ–Ω –æ–±—ä–µ–∫—Ç–æ–≤', async () => {
    const properties = await prisma.property.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    const validPrices = properties.filter(p => 
      p.price > 0 && p.price <= 1000000
    )
    return validPrices.length === properties.length
  }, '–í—Å–µ —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏')

  await runTest(29, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—É–º–º –ø–ª–∞—Ç–µ–∂–µ–π', async () => {
    const payments = await prisma.payment.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    const validAmounts = payments.filter(p => 
      p.amount > 0 && p.amount <= 1000000
    )
    return validAmounts.length === payments.length
  }, '–í—Å–µ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–µ–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏')

  await runTest(30, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç', async () => {
    const contracts = await prisma.contract.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    const contractsWithDates = contracts.filter(c => c.signedAt && c.expiresAt)
    const validDates = contractsWithDates.filter(c => 
      c.signedAt && c.expiresAt && c.signedAt < c.expiresAt
    )
    console.log(`   –î–æ–≥–æ–≤–æ—Ä–æ–≤ —Å –¥–∞—Ç–∞–º–∏: ${contractsWithDates.length}, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: ${validDates.length}`)
    // –¢—Ä–µ–±—É–µ–º, —á—Ç–æ–±—ã –º–∏–Ω–∏–º—É–º 80% –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å –¥–∞—Ç–∞–º–∏ –±—ã–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏
    return contractsWithDates.length === 0 || (validDates.length / contractsWithDates.length) >= 0.8
  }, '–ú–∏–Ω–∏–º—É–º 80% –¥–∞—Ç –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏')

  // –°—Ü–µ–Ω–∞—Ä–∏–π 31-40: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  await runTest(31, '–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏', async () => {
    const startTime = Date.now()
    const clients = await prisma.client.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        firstName: { contains: '–ê–Ω–Ω–∞' }
      }
    })
    const endTime = Date.now()
    return clients.length > 0 && (endTime - startTime) < 1000
  }, '–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ')

  await runTest(32, '–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É', async () => {
    const startTime = Date.now()
    const properties = await prisma.property.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        address: { contains: '–¢–≤–µ—Ä—Å–∫–∞—è' }
      }
    })
    const endTime = Date.now()
    return properties.length > 0 && (endTime - startTime) < 1000
  }, '–ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ')

  await runTest(33, '–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É', async () => {
    const startTime = Date.now()
    const contracts = await prisma.contract.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        status: 'SIGNED'
      }
    })
    const endTime = Date.now()
    return contracts.length > 0 && (endTime - startTime) < 1000
  }, '–ü–æ–∏—Å–∫ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ')

  await runTest(34, '–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ —Ç–∏–ø—É', async () => {
    const startTime = Date.now()
    const payments = await prisma.payment.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        type: 'RENT'
      }
    })
    const endTime = Date.now()
    return payments.length > 0 && (endTime - startTime) < 1000
  }, '–ü–æ–∏—Å–∫ –ø–ª–∞—Ç–µ–∂–µ–π –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ')

  await runTest(35, '–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É', async () => {
    const startTime = Date.now()
    const notifications = await prisma.notification.findMany({
      where: { 
        user: { email: 'nikitatitov070@gmail.com' },
        type: 'INFO'
      }
    })
    const endTime = Date.now()
    return notifications.length > 0 && (endTime - startTime) < 1000
  }, '–ü–æ–∏—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ')

  // –°—Ü–µ–Ω–∞—Ä–∏–π 36-45: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  await runTest(36, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', async () => {
    const user = await prisma.user.findUnique({
      where: { email: 'nikitatitov070@gmail.com' },
      include: { clients: true }
    })
    return user && user.clients.length >= 4 && 
           user.clients.every(c => c.userId === user.id)
  }, '–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')

  await runTest(37, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', async () => {
    const user = await prisma.user.findUnique({
      where: { email: 'nikitatitov070@gmail.com' },
      include: { properties: true }
    })
    return user && user.properties.length >= 4 && 
           user.properties.every(p => p.userId === user.id)
  }, '–í—Å–µ –æ–±—ä–µ–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')

  await runTest(38, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', async () => {
    const user = await prisma.user.findUnique({
      where: { email: 'nikitatitov070@gmail.com' },
      include: { contracts: true }
    })
    return user && user.contracts.length >= 3 && 
           user.contracts.every(c => c.userId === user.id)
  }, '–í—Å–µ –¥–æ–≥–æ–≤–æ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')

  await runTest(39, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –ø–ª–∞—Ç–µ–∂–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', async () => {
    const user = await prisma.user.findUnique({
      where: { email: 'nikitatitov070@gmail.com' },
      include: { payments: true }
    })
    return user && user.payments.length >= 4 && 
           user.payments.every(p => p.userId === user.id)
  }, '–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')

  await runTest(40, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', async () => {
    const user = await prisma.user.findUnique({
      where: { email: 'nikitatitov070@gmail.com' },
      include: { notifications: true }
    })
    return user && user.notifications.length >= 4 && 
           user.notifications.every(n => n.userId === user.id)
  }, '–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')

  // –°—Ü–µ–Ω–∞—Ä–∏–π 41-50: –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  await runTest(41, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    const user = await prisma.user.findUnique({
      where: { email: 'nikitatitov070@gmail.com' },
      include: {
        clients: true,
        properties: true,
        contracts: true,
        payments: true,
        notifications: true
      }
    })
    
    if (!user) return false
    
    const totalRecords = user.clients.length + user.properties.length + 
                        user.contracts.length + user.payments.length + 
                        user.notifications.length
    
    return totalRecords >= 19 // –ú–∏–Ω–∏–º—É–º 4+4+3+4+4 = 19 –∑–∞–ø–∏—Å–µ–π
  }, '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö')

  await runTest(42, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö', async () => {
    const clients = await prisma.client.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    const properties = await prisma.property.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    const contracts = await prisma.contract.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    const payments = await prisma.payment.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    const notifications = await prisma.notification.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    
    const clientTypes = new Set(clients.map(c => c.type))
    const propertyTypes = new Set(properties.map(p => p.type))
    const contractStatuses = new Set(contracts.map(c => c.status))
    const paymentTypes = new Set(payments.map(p => p.type))
    const notificationTypes = new Set(notifications.map(n => n.type))
    
    return clientTypes.size >= 2 && propertyTypes.size >= 1 && 
           contractStatuses.size >= 2 && paymentTypes.size >= 1 && 
           notificationTypes.size >= 2
  }, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö')

  await runTest(43, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤', async () => {
    const clients = await prisma.client.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    const properties = await prisma.property.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    const contracts = await prisma.contract.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    const payments = await prisma.payment.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    const notifications = await prisma.notification.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    
    const clientIds = new Set(clients.map(c => c.id))
    const propertyIds = new Set(properties.map(p => p.id))
    const contractIds = new Set(contracts.map(c => c.id))
    const paymentIds = new Set(payments.map(p => p.id))
    const notificationIds = new Set(notifications.map(n => n.id))
    
    return clientIds.size === clients.length && 
           propertyIds.size === properties.length && 
           contractIds.size === contracts.length && 
           paymentIds.size === payments.length && 
           notificationIds.size === notifications.length
  }, '–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–ø–∏—Å–µ–π')

  await runTest(44, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π', async () => {
    const clients = await prisma.client.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    const properties = await prisma.property.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    const contracts = await prisma.contract.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    const payments = await prisma.payment.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    const notifications = await prisma.notification.findMany({
      where: { user: { email: 'nikitatitov070@gmail.com' } }
    })
    
    const validClients = clients.every(c => c.firstName && c.lastName && c.phone)
    const validProperties = properties.every(p => p.title && p.address && p.price > 0)
    const validContracts = contracts.every(c => c.title && c.content)
    const validPayments = payments.every(p => p.amount > 0 && p.dueDate)
    const validNotifications = notifications.every(n => n.title && n.message)
    
    return validClients && validProperties && validContracts && 
           validPayments && validNotifications
  }, '–í—Å–µ –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è')

  await runTest(45, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –≤ —Ü–µ–ª–æ–º', async () => {
    const user = await prisma.user.findUnique({
      where: { email: 'nikitatitov070@gmail.com' }
    })
    
    if (!user) return false
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    const testClient = await prisma.client.create({
      data: {
        firstName: '–¢–µ—Å—Ç',
        lastName: '–¢–µ—Å—Ç–æ–≤',
        phone: '+7 (999) 777-77-77',
        type: 'TENANT',
        userId: user.id
      }
    })
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    await prisma.client.delete({
      where: { id: testClient.id }
    })
    
    return true
  }, '–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∑–≤–æ–ª—è—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –∑–∞–ø–∏—Å–∏')

  await runTest(46, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', async () => {
    const startTime = Date.now()
    
    const result = await prisma.user.findUnique({
      where: { email: 'nikitatitov070@gmail.com' },
      include: {
        clients: {
          where: { type: 'TENANT' }
        },
        properties: {
          where: { price: { gte: 50000 } }
        },
        contracts: {
          where: { status: 'SIGNED' }
        },
        payments: {
          where: { status: 'PAID' }
        },
        notifications: {
          where: { read: false }
        }
      }
    })
    
    const endTime = Date.now()
    
    return result && (endTime - startTime) < 2000
  }, '–°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è')

  await runTest(47, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏', async () => {
    const user = await prisma.user.findUnique({
      where: { email: 'nikitatitov070@gmail.com' }
    })
    
    if (!user) return false
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const clients = await prisma.client.count({
      where: { userId: user.id }
    })
    const properties = await prisma.property.count({
      where: { userId: user.id }
    })
    const contracts = await prisma.contract.count({
      where: { userId: user.id }
    })
    const payments = await prisma.payment.count({
      where: { userId: user.id }
    })
    const notifications = await prisma.notification.count({
      where: { userId: user.id }
    })
    
    const totalUserRecords = clients + properties + contracts + payments + notifications
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const totalClients = await prisma.client.count()
    const totalProperties = await prisma.property.count()
    const totalContracts = await prisma.contract.count()
    const totalPayments = await prisma.payment.count()
    const totalNotifications = await prisma.notification.count()
    
    const totalRecords = totalClients + totalProperties + totalContracts + 
                        totalPayments + totalNotifications
    
    return totalUserRecords === totalRecords
  }, '–í—Å–µ –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')

  await runTest(48, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è orphaned –∑–∞–ø–∏—Å–µ–π', async () => {
    const allClients = await prisma.client.findMany()
    const allProperties = await prisma.property.findMany()
    const allContracts = await prisma.contract.findMany()
    const allPayments = await prisma.payment.findMany()
    const allNotifications = await prisma.notification.findMany()
    
    const orphanedClients = allClients.filter(c => !c.userId)
    const orphanedProperties = allProperties.filter(p => !p.userId)
    const orphanedContracts = allContracts.filter(c => !c.userId)
    const orphanedPayments = allPayments.filter(p => !p.userId)
    const orphanedNotifications = allNotifications.filter(n => !n.userId)
    
    return orphanedClients.length === 0 && 
           orphanedProperties.length === 0 && 
           orphanedContracts.length === 0 && 
           orphanedPayments.length === 0 && 
           orphanedNotifications.length === 0
  }, '–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

  await runTest(49, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö', async () => {
    const user = await prisma.user.findUnique({
      where: { email: 'nikitatitov070@gmail.com' }
    })
    
    if (!user) return false
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º
    const expectedMinRecords = 19 // –ú–∏–Ω–∏–º—É–º –∑–∞–ø–∏—Å–µ–π
    
    const actualRecords = await prisma.client.count({
      where: { userId: user.id }
    }) + await prisma.property.count({
      where: { userId: user.id }
    }) + await prisma.contract.count({
      where: { userId: user.id }
    }) + await prisma.payment.count({
      where: { userId: user.id }
    }) + await prisma.notification.count({
      where: { userId: user.id }
    })
    
    return actualRecords >= expectedMinRecords
  }, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–∂–∏–¥–∞–Ω–∏—è–º')

  await runTest(50, '–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã', async () => {
    const user = await prisma.user.findUnique({
      where: { email: 'nikitatitov070@gmail.com' },
      include: {
        clients: true,
        properties: true,
        contracts: true,
        payments: true,
        notifications: true
      }
    })
    
    if (!user) return false
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    const hasClients = user.clients.length >= 4
    const hasProperties = user.properties.length >= 4
    const hasContracts = user.contracts.length >= 3
    const hasPayments = user.payments.length >= 4
    const hasNotifications = user.notifications.length >= 4
    
    const hasDiverseData = new Set(user.clients.map(c => c.type)).size >= 2 &&
                          new Set(user.contracts.map(c => c.status)).size >= 2 &&
                          new Set(user.payments.map(p => p.status)).size >= 2 &&
                          new Set(user.notifications.map(n => n.type)).size >= 2
    
    const hasValidData = user.clients.every(c => c.firstName && c.lastName && c.phone) &&
                        user.properties.every(p => p.title && p.address && p.price > 0) &&
                        user.contracts.every(c => c.title && c.content) &&
                        user.payments.every(p => p.amount > 0 && p.dueDate) &&
                        user.notifications.every(n => n.title && n.message)
    
    return hasClients && hasProperties && hasContracts && 
           hasPayments && hasNotifications && hasDiverseData && hasValidData
  }, '–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é')

  // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–õ–û–ñ–ù–´–• –°–¶–ï–ù–ê–†–ò–ï–í:')
  console.log('=' * 70)
  
  const passed = testResults.filter(t => t.status === 'PASS').length
  const failed = testResults.filter(t => t.status === 'FAIL').length
  
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`)
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`)
  console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((passed / testResults.length) * 100).toFixed(1)}%`)
  
  if (failed > 0) {
    console.log('\n‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:')
    testResults
      .filter(t => t.status === 'FAIL')
      .forEach(t => {
        console.log(`   –¢–µ—Å—Ç ${t.testId}: ${t.name}`)
        console.log(`   –î–µ—Ç–∞–ª–∏: ${t.details}`)
        if (t.error) console.log(`   –û—à–∏–±–∫–∞: ${t.error}`)
        console.log('')
      })
  }
  
  console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')
  if (passed === testResults.length) {
    console.log('‚úÖ –í—Å–µ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.')
  } else {
    console.log('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö.')
    console.log('üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.')
  }
}

complexScenariosTesting()
  .catch(console.error)
  .finally(() => prisma.$disconnect()) 