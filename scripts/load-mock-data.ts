import { PrismaClient } from '@prisma/client'
import { hashPassword } from '../src/lib/auth'

const prisma = new PrismaClient()

async function loadMockData() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')

    // 1. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userEmail = 'nikitatitov070@gmail.com'
    const hashedPassword = await hashPassword('password123')

    const user = await prisma.user.upsert({
      where: { email: userEmail },
      update: {},
      create: {
        email: userEmail,
        password: hashedPassword,
        firstName: '–ù–∏–∫–∏—Ç–∞',
        lastName: '–¢–∏—Ç–æ–≤',
        role: 'REALTOR',
        verified: true,
        phone: '+7 (999) 123-45-67'
      }
    })

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω:', user.email)

    // 2. –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    const clients = await Promise.all([
      prisma.client.create({
        data: {
          firstName: '–ê–Ω–Ω–∞',
          lastName: '–ü–µ—Ç—Ä–æ–≤–∞',
          middleName: '–°–µ—Ä–≥–µ–µ–≤–Ω–∞',
          email: 'anna.petrova@email.com',
          phone: '+7 (916) 111-22-33',
          birthDate: new Date('1990-05-15'),
          type: 'TENANT',
          passport: '4510 123456',
          snils: '123-456-789 01',
          inn: '123456789012',
          address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 1, –∫–≤. 15',
          city: '–ú–æ—Å–∫–≤–∞',
          notes: '–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–∞ –≤ 2-3 –∫–æ–º–Ω–∞—Ç–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö',
          source: '–°–∞–π—Ç',
          isActive: true,
          userId: user.id
        }
      }),
      prisma.client.create({
        data: {
          firstName: '–î–º–∏—Ç—Ä–∏–π',
          lastName: '–°–∏–¥–æ—Ä–æ–≤',
          middleName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á',
          email: 'dmitry.sidorov@email.com',
          phone: '+7 (903) 444-55-66',
          birthDate: new Date('1985-12-03'),
          type: 'LANDLORD',
          passport: '4511 654321',
          snils: '987-654-321 09',
          inn: '987654321098',
          address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ê—Ä–±–∞—Ç, –¥. 25, –∫–≤. 8',
          city: '–ú–æ—Å–∫–≤–∞',
          notes: '–°–¥–∞–µ—Ç 2 –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ —Ü–µ–Ω—Ç—Ä–µ',
          source: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è',
          isActive: true,
          userId: user.id
        }
      }),
      prisma.client.create({
        data: {
          firstName: '–ï–ª–µ–Ω–∞',
          lastName: '–ö–æ–∑–ª–æ–≤–∞',
          middleName: '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞',
          email: 'elena.kozlova@email.com',
          phone: '+7 (925) 777-88-99',
          birthDate: new Date('1992-08-20'),
          type: 'TENANT',
          passport: '4512 789012',
          snils: '456-789-012 34',
          inn: '456789012345',
          address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ù–æ–≤—ã–π –ê—Ä–±–∞—Ç, –¥. 10, –∫–≤. 45',
          city: '–ú–æ—Å–∫–≤–∞',
          notes: '–ò—â–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è —Å–µ–º—å–∏ —Å —Ä–µ–±–µ–Ω–∫–æ–º',
          source: 'Avito',
          isActive: true,
          userId: user.id
        }
      })
    ])

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤:', clients.length)

    // 3. –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    const properties = await Promise.all([
      prisma.property.create({
        data: {
          title: '–£—é—Ç–Ω–∞—è 2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ',
          type: 'APARTMENT',
          address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 15, –∫–≤. 23',
          area: 65.5,
          bedrooms: 1,
          bathrooms: 1,
          price: 85000,
          description: '–°–≤–µ—Ç–ª–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å —Ä–µ–º–æ–Ω—Ç–æ–º, –º–µ–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, –≤—Å–µ —É–¥–æ–±—Å—Ç–≤–∞',
          images: ['https://via.placeholder.com/400x300/4F46E5/FFFFFF?text=–ö–≤–∞—Ä—Ç–∏—Ä–∞+1'],
          features: ['–ú–µ–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è', '–†–µ–º–æ–Ω—Ç', '–¶–µ–Ω—Ç—Ä'],
          userId: user.id
        }
      }),
      prisma.property.create({
        data: {
          title: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è 3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ –ê—Ä–±–∞—Ç–µ',
          type: 'APARTMENT',
          address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ê—Ä–±–∞—Ç, –¥. 25, –∫–≤. 8',
          area: 89.0,
          bedrooms: 2,
          bathrooms: 2,
          price: 120000,
          description: '–ü—Ä–æ—Å—Ç–æ—Ä–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–º —Ä–µ–º–æ–Ω—Ç–æ–º, –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞',
          images: ['https://via.placeholder.com/400x300/10B981/FFFFFF?text=–ö–≤–∞—Ä—Ç–∏—Ä–∞+2'],
          features: ['–î–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π —Ä–µ–º–æ–Ω—Ç', '–ü–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞', '–ü—Ä–µ–º–∏—É–º'],
          userId: user.id
        }
      }),
      prisma.property.create({
        data: {
          title: '1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞-—Å—Ç—É–¥–∏—è –Ω–∞ –ù–æ–≤–æ–º –ê—Ä–±–∞—Ç–µ',
          type: 'APARTMENT',
          address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ù–æ–≤—ã–π –ê—Ä–±–∞—Ç, –¥. 10, –∫–≤. 45',
          area: 42.0,
          bedrooms: 0,
          bathrooms: 1,
          price: 65000,
          description: '–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å—Ç—É–¥–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç',
          images: ['https://via.placeholder.com/400x300/F59E0B/FFFFFF?text=–°—Ç—É–¥–∏—è'],
          features: ['–°—Ç—É–¥–∏—è', '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç', '–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è'],
          userId: user.id
        }
      })
    ])

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', properties.length)

    // 4. –°–æ–∑–¥–∞–µ–º –¥–æ–≥–æ–≤–æ—Ä—ã
    const contracts = await Promise.all([
      prisma.contract.create({
        data: {
          title: '–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π',
          content: '–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã 2-–∫–æ–º–Ω–∞—Ç–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 15, –∫–≤. 23. –ê—Ä–µ–Ω–¥–Ω–∞—è –ø–ª–∞—Ç–∞: 85,000 —Ä—É–±/–º–µ—Å. –°—Ä–æ–∫: 1 –≥–æ–¥.',
          status: 'SIGNED',
          signedAt: new Date('2024-01-15'),
          expiresAt: new Date('2025-01-15'),
          userId: user.id
        }
      }),
      prisma.contract.create({
        data: {
          title: '–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –ê—Ä–±–∞—Ç–µ',
          content: '–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã 3-–∫–æ–º–Ω–∞—Ç–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ê—Ä–±–∞—Ç, –¥. 25, –∫–≤. 8. –ê—Ä–µ–Ω–¥–Ω–∞—è –ø–ª–∞—Ç–∞: 120,000 —Ä—É–±/–º–µ—Å. –°—Ä–æ–∫: 1 –≥–æ–¥.',
          status: 'DRAFT',
          userId: user.id
        }
      })
    ])

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ –¥–æ–≥–æ–≤–æ—Ä–æ–≤:', contracts.length)

    // 5. –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏
    const payments = await Promise.all([
      prisma.payment.create({
        data: {
          amount: 85000,
          type: 'RENT',
          status: 'PAID',
          dueDate: new Date('2024-01-15'),
          paidAt: new Date('2024-01-15'),
          userId: user.id
        }
      }),
      prisma.payment.create({
        data: {
          amount: 85000,
          type: 'RENT',
          status: 'PAID',
          dueDate: new Date('2024-02-15'),
          paidAt: new Date('2024-02-15'),
          userId: user.id
        }
      }),
      prisma.payment.create({
        data: {
          amount: 85000,
          type: 'RENT',
          status: 'PENDING',
          dueDate: new Date('2024-03-15'),
          userId: user.id
        }
      })
    ])

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π:', payments.length)

    // 6. –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notifications = await Promise.all([
      prisma.notification.create({
        data: {
          title: '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
          message: '–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
          type: 'INFO',
          read: false,
          userId: user.id
        }
      }),
      prisma.notification.create({
        data: {
          title: '–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω',
          message: '–ü–ª–∞—Ç–µ–∂ –∑–∞ –º–∞—Ä—Ç 2024 –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ 5 –¥–Ω–µ–π',
          type: 'WARNING',
          read: false,
          userId: user.id
        }
      }),
      prisma.notification.create({
        data: {
          title: '–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥–ø–∏—Å–∞–Ω',
          message: '–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω',
          type: 'SUCCESS',
          read: true,
          userId: user.id
        }
      })
    ])

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', notifications.length)

    console.log('üéâ –í—Å–µ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!')
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    console.log(`- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 1`)
    console.log(`- –ö–ª–∏–µ–Ω—Ç–æ–≤: ${clients.length}`)
    console.log(`- –û–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: ${properties.length}`)
    console.log(`- –î–æ–≥–æ–≤–æ—Ä–æ–≤: ${contracts.length}`)
    console.log(`- –ü–ª–∞—Ç–µ–∂–µ–π: ${payments.length}`)
    console.log(`- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${notifications.length}`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error)
  } finally {
    await prisma.$disconnect()
  }
}

loadMockData() 