import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function testDashboard() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Dashboard...\n')

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
    await prisma.$connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ\n')

    // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    console.log('2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
    let testUser = await prisma.user.findFirst({
      where: { email: 'test@example.com' }
    })

    if (!testUser) {
      testUser = await prisma.user.create({
        data: {
          email: 'test@example.com',
          password: 'hashedpassword',
          firstName: '–¢–µ—Å—Ç',
          lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          role: 'REALTOR'
        }
      })
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', testUser.email)
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', testUser.email)
    }
    console.log()

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
    const properties = await Promise.all([
      prisma.property.create({
                 data: {
           title: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ 1',
           description: '–ö—Ä–∞—Å–∏–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ',
           type: 'APARTMENT',
           address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1, –ú–æ—Å–∫–≤–∞',
           price: 50000,
           userId: testUser.id
         }
      }),
      prisma.property.create({
                 data: {
           title: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ 2',
           description: '–£—é—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å —Ä–µ–º–æ–Ω—Ç–æ–º',
           type: 'APARTMENT',
           address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 2, –ú–æ—Å–∫–≤–∞',
           price: 60000,
           userId: testUser.id
         }
      })
    ])
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', properties.length)

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    const clients = await Promise.all([
      prisma.client.create({
        data: {
          firstName: '–ò–≤–∞–Ω',
          lastName: '–ò–≤–∞–Ω–æ–≤',
          email: 'ivan@example.com',
          phone: '+7 999 123-45-67',
          userId: testUser.id
        }
      }),
      prisma.client.create({
        data: {
          firstName: '–ú–∞—Ä–∏—è',
          lastName: '–ü–µ—Ç—Ä–æ–≤–∞',
          email: 'maria@example.com',
          phone: '+7 999 765-43-21',
          userId: testUser.id
        }
      })
    ])
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤:', clients.length)

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏
    const deals = await Promise.all([
      prisma.deal.create({
        data: {
          title: '–°–¥–µ–ª–∫–∞ –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–µ 1',
          status: 'IN_PROGRESS',
          userId: testUser.id
        }
      })
    ])
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–¥–µ–ª–æ–∫:', deals.length)

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã
    const contracts = await Promise.all([
             prisma.contract.create({
         data: {
           title: '–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã 1',
           content: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –∞—Ä–µ–Ω–¥—ã...',
           status: 'DRAFT',
           userId: testUser.id
         }
       })
    ])
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ –¥–æ–≥–æ–≤–æ—Ä–æ–≤:', contracts.length)

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    const payments = await Promise.all([
      prisma.payment.create({
        data: {
          amount: 50000,
          status: 'PAID',
          userId: testUser.id
        }
      }),
      prisma.payment.create({
        data: {
          amount: 30000,
          status: 'PENDING',
          userId: testUser.id
        }
      })
    ])
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π:', payments.length)

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notifications = await Promise.all([
      prisma.notification.create({
        data: {
          title: '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          message: '–£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞',
          type: 'INFO',
          userId: testUser.id
        }
      })
    ])
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', notifications.length)
    console.log()

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...')
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    const stats = {
      properties: await prisma.property.count({ where: { userId: testUser.id } }),
      clients: await prisma.client.count({ where: { userId: testUser.id } }),
      deals: await prisma.deal.count({ where: { userId: testUser.id } }),
      contracts: await prisma.contract.count({ where: { userId: testUser.id } }),
      payments: await prisma.payment.count({ where: { userId: testUser.id } }),
      notifications: await prisma.notification.count({ where: { userId: testUser.id } }),
      totalRevenue: (await prisma.payment.aggregate({
        where: { userId: testUser.id, status: 'PAID' },
        _sum: { amount: true }
      }))._sum.amount || 0,
      pendingPayments: (await prisma.payment.aggregate({
        where: { userId: testUser.id, status: 'PENDING' },
        _sum: { amount: true }
      }))._sum.amount || 0
    }

    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ dashboard:')
    console.log('  - –û–±—ä–µ–∫—Ç—ã:', stats.properties)
    console.log('  - –ö–ª–∏–µ–Ω—Ç—ã:', stats.clients)
    console.log('  - –°–¥–µ–ª–∫–∏:', stats.deals)
    console.log('  - –î–æ–≥–æ–≤–æ—Ä—ã:', stats.contracts)
    console.log('  - –ü–ª–∞—Ç–µ–∂–∏:', stats.payments)
    console.log('  - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', stats.notifications)
    console.log('  - –û–±—â–∏–π –¥–æ—Ö–æ–¥:', stats.totalRevenue.toLocaleString('ru-RU'), '‚ÇΩ')
    console.log('  - –û–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏:', stats.pendingPayments.toLocaleString('ru-RU'), '‚ÇΩ')
    console.log()

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    console.log('5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...')
    
    const recentActivity = []
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã
    const recentProperties = await prisma.property.findMany({
      where: { userId: testUser.id },
      orderBy: { createdAt: 'desc' },
      take: 3
    })

    recentProperties.forEach(property => {
      recentActivity.push({
        id: `property-${property.id}`,
        type: 'property',
        title: '–ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω',
        description: property.title,
        timestamp: property.createdAt.toISOString(),
        status: 'success'
      })
    })

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—ã
    const recentClients = await prisma.client.findMany({
      where: { userId: testUser.id },
      orderBy: { createdAt: 'desc' },
      take: 3
    })

    recentClients.forEach(client => {
      recentActivity.push({
        id: `client-${client.id}`,
        type: 'client',
        title: '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω',
        description: `${client.firstName} ${client.lastName}`,
        timestamp: client.createdAt.toISOString(),
        status: 'success'
      })
    })

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const sortedActivity = recentActivity
      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())
      .slice(0, 10)

    console.log('üìà –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:')
    sortedActivity.forEach((activity, index) => {
      console.log(`  ${index + 1}. ${activity.title}: ${activity.description}`)
    })
    console.log()

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
    
    const tables = ['User', 'Property', 'Client', 'Deal', 'Contract', 'Payment', 'Notification']
    
    for (const table of tables) {
      try {
        const count = await (prisma as any)[table.toLowerCase()].count()
        console.log(`  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table}: ${count} –∑–∞–ø–∏—Å–µ–π`)
      } catch (error) {
        console.log(`  ‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: –æ—à–∏–±–∫–∞ - ${error}`)
      }
    }
    console.log()

    // 7. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('7. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
    
    await Promise.all([
      prisma.property.deleteMany({ where: { userId: testUser.id } }),
      prisma.client.deleteMany({ where: { userId: testUser.id } }),
      prisma.deal.deleteMany({ where: { userId: testUser.id } }),
      prisma.contract.deleteMany({ where: { userId: testUser.id } }),
      prisma.payment.deleteMany({ where: { userId: testUser.id } }),
      prisma.notification.deleteMany({ where: { userId: testUser.id } })
    ])
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã')
    console.log()

    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Dashboard –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:')
    console.log('  ‚úÖ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
    console.log('  ‚úÖ API –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
    console.log('  ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞')
    console.log('  ‚úÖ –í—Å–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç')
    console.log('  ‚úÖ Dashboard –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Dashboard:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testDashboard() 