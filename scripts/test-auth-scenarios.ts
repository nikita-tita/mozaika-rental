import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function testAuthScenarios() {
  console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...')
  
  try {
    // 1. –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('\n1Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
    await prisma.user.deleteMany({})
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞')
    
    // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
    const testUser = await prisma.user.create({
      data: {
        email: 'test@example.com',
        password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.iK8i', // password: test123
        firstName: '–¢–µ—Å—Ç',
        lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        role: 'REALTOR',
        phone: '+7 (999) 123-45-67'
      }
    })
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', testUser.email)
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...')
    
    // –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('\nüìù –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...')
    const registerResponse = await fetch('http://localhost:3000/api/auth/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'newuser@example.com',
        password: 'newpassword123',
        firstName: '–ù–æ–≤—ã–π',
        lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        phone: '+7 (999) 999-99-99'
      })
    })
    
    if (registerResponse.ok) {
      const registerData = await registerResponse.json()
      console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', registerData.success)
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registerResponse.status)
    }
    
    // –¢–µ—Å—Ç –≤—Ö–æ–¥–∞
    console.log('\nüîê –¢–µ—Å—Ç –≤—Ö–æ–¥–∞...')
    const loginResponse = await fetch('http://localhost:3000/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'test@example.com',
        password: 'test123'
      })
    })
    
    if (loginResponse.ok) {
      const loginData = await loginResponse.json()
      console.log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω:', loginData.success)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º cookie
      const cookies = loginResponse.headers.get('set-cookie')
      console.log('üç™ Cookie —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!cookies)
      
      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('\nüë§ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
      const meResponse = await fetch('http://localhost:3000/api/auth/me', {
        method: 'GET',
        headers: {
          'Cookie': `auth-token=${loginData.token}`
        }
      })
      
      if (meResponse.ok) {
        const meData = await meResponse.json()
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:', meData.success)
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', meResponse.status)
      }
      
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', loginResponse.status)
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤...')
    
    const protectedRoutes = [
      '/clients',
      '/properties',
      '/mosaic',
      '/dashboard'
    ]
    
    for (const route of protectedRoutes) {
      console.log(`\nüîí –¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∞: ${route}`)
      const routeResponse = await fetch(`http://localhost:3000${route}`)
      console.log(`–°—Ç–∞—Ç—É—Å: ${routeResponse.status}`)
    }
    
    // 5. –¢–µ—Å—Ç –≤—ã—Ö–æ–¥–∞
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç –≤—ã—Ö–æ–¥–∞...')
    const logoutResponse = await fetch('http://localhost:3000/api/auth/logout', {
      method: 'POST'
    })
    
    if (logoutResponse.ok) {
      console.log('‚úÖ –í—ã—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω')
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', logoutResponse.status)
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testAuthScenarios()
}

export { testAuthScenarios } 