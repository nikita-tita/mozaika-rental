#!/usr/bin/env tsx

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function testPropertyCreation() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...\n')

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
    await prisma.$connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ\n')

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
    const testUser = await prisma.user.findUnique({
      where: { email: 'nikitatitov070@gmail.com' }
    })

    if (!testUser) {
      console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', testUser.email)
    console.log()

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...')
    
    const testPropertyData = {
      title: '–¢–µ—Å—Ç–æ–≤–∞—è 2-–∫ –∫–≤–∞—Ä—Ç–∏—Ä–∞',
      description: '–ö—Ä–∞—Å–∏–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞',
      type: 'APARTMENT',
      address: '—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1, –∫–≤. 5',
      price: 50000,
      bedrooms: 2,
      bathrooms: 1,
      area: 65.5,
      features: ['–ë–∞–ª–∫–æ–Ω', '–õ–∏—Ñ—Ç', '–ü–∞—Ä–∫–æ–≤–∫–∞'],
      images: [],
      userId: testUser.id
    }

    const newProperty = await prisma.property.create({
      data: testPropertyData
    })

    console.log('‚úÖ –û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:')
    console.log(`   ID: ${newProperty.id}`)
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${newProperty.title}`)
    console.log(`   –¢–∏–ø: ${newProperty.type}`)
    console.log(`   –¶–µ–Ω–∞: ${newProperty.price} ‚ÇΩ`)
    console.log(`   –ü–ª–æ—â–∞–¥—å: ${newProperty.area} –º¬≤`)
    console.log(`   –°–ø–∞–ª—å–Ω–∏: ${newProperty.bedrooms}`)
    console.log(`   –í–∞–Ω–Ω—ã–µ: ${newProperty.bathrooms}`)
    console.log(`   –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${newProperty.features.join(', ')}`)
    console.log()

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –≤ –±–∞–∑–µ
    console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ –±–∞–∑–µ...')
    const savedProperty = await prisma.property.findUnique({
      where: { id: newProperty.id },
      include: { user: true }
    })

    if (savedProperty) {
      console.log('‚úÖ –û–±—ä–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${savedProperty.user.firstName} ${savedProperty.user.lastName}`)
      console.log(`   –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${savedProperty.createdAt}`)
    } else {
      console.log('‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    }
    console.log()

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
    console.log('5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...')
    
    // –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    try {
      await prisma.property.create({
        data: {
          title: '', // –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
          type: 'APARTMENT',
          address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1',
          price: -1000, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞
          userId: testUser.id
        }
      })
      console.log('‚ùå –û–±—ä–µ–∫—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏)')
    } catch (error) {
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: –æ–±—ä–µ–∫—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω')
      console.log(`   –û—à–∏–±–∫–∞: ${error.message}`)
    }
    console.log()

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('6Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...')
    const propertyCount = await prisma.property.count()
    const userProperties = await prisma.property.count({
      where: { userId: testUser.id }
    })
    
    console.log(`üìä –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${propertyCount}`)
    console.log(`üìä –û–±—ä–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${testUser.email}: ${userProperties}`)
    console.log()

    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    console.log('7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...')
    
    const propertyTypes = ['APARTMENT', 'HOUSE', 'COMMERCIAL', 'LAND']
    
    for (const type of propertyTypes) {
      try {
        const property = await prisma.property.create({
          data: {
            title: `–¢–µ—Å—Ç–æ–≤—ã–π ${type.toLowerCase()}`,
            description: `–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ${type.toLowerCase()}`,
            type: type as any,
            address: `—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. ${Math.floor(Math.random() * 100)}`,
            price: Math.floor(Math.random() * 100000) + 10000,
            userId: testUser.id
          }
        })
        console.log(`‚úÖ ${type} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ (ID: ${property.id})`)
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${type}: ${error.message}`)
      }
    }
    console.log()

    // 8. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('8Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
    const deletedProperties = await prisma.property.deleteMany({
      where: {
        title: {
          startsWith: '–¢–µ—Å—Ç–æ–≤—ã–π'
        }
      }
    })
    
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: ${deletedProperties.count}`)
    console.log()

    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
    console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:')
    console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ')
    console.log('   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è')
    console.log('   ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testPropertyCreation()
  .then(() => {
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error)
    process.exit(1)
  }) 