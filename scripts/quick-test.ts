import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'
import jwt from 'jsonwebtoken'

const prisma = new PrismaClient()
const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-here'

interface TestResult {
  scenario: string
  success: boolean
  error?: string
  details?: any
}

class QuickTester {
  private results: TestResult[] = []
  private testUsers: any[] = []

  async runTests() {
    console.log('üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...')
    
    try {
      await this.setupTestData()
      await this.runAuthTests()
      await this.runPropertyTests()
      await this.runClientTests()
      await this.runDealTests()
      await this.runSecurityTests()
      await this.runEdgeCases()
      
      this.printResults()
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    } finally {
      await this.cleanup()
      await prisma.$disconnect()
    }
  }

  private async setupTestData() {
    console.log('üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...')
    
    const users = [
      { email: 'realtor1@test.com', firstName: '–ê–Ω–Ω–∞', lastName: '–ü–µ—Ç—Ä–æ–≤–∞' },
      { email: 'realtor2@test.com', firstName: '–ò–≤–∞–Ω', lastName: '–°–∏–¥–æ—Ä–æ–≤' },
      { email: 'confused@test.com', firstName: '–ó–∞–ø—É—Ç–∞–≤—à–∏–π—Å—è', lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' }
    ]

    for (const userData of users) {
      const hashedPassword = await bcrypt.hash('password123', 10)
      const user = await prisma.user.create({
        data: {
          ...userData,
          password: hashedPassword,
          verified: true
        }
      })
      this.testUsers.push(user)
    }
  }

  private async runAuthTests() {
    console.log('\nüîê –¢–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...')

    // –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    await this.testScenario('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
      const userData = {
        email: 'newuser@test.com',
        password: 'password123',
        firstName: '–ù–æ–≤—ã–π',
        lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
      }

      const hashedPassword = await bcrypt.hash(userData.password, 10)
      const user = await prisma.user.create({
        data: {
          ...userData,
          password: hashedPassword
        }
      })

      return { userId: user.id, email: user.email }
    })

    // –¢–µ—Å—Ç 2: –í—Ö–æ–¥
    await this.testScenario('–í—Ö–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', async () => {
      const user = this.testUsers[0]
      const password = 'password123'
      const isValid = await bcrypt.compare(password, user.password)
      
      if (!isValid) throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
      
      const token = jwt.sign(
        { userId: user.id, email: user.email, role: user.role },
        JWT_SECRET,
        { expiresIn: '30d' }
      )

      return { token: !!token, user: { id: user.id, email: user.email } }
    })

    // –¢–µ—Å—Ç 3: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å
    await this.testScenario('–í—Ö–æ–¥ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º', async () => {
      const user = this.testUsers[0]
      const wrongPassword = 'wrongpassword'
      const isValid = await bcrypt.compare(wrongPassword, user.password)
      
      if (isValid) throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–º')
      
      return { success: false, expected: true }
    })
  }

  private async runPropertyTests() {
    console.log('\nüè† –¢–µ—Å—Ç—ã –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...')

    // –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    await this.testScenario('–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', async () => {
      const user = this.testUsers[0]
      const propertyData = {
        title: '–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ',
        description: '–£—é—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å —Ä–µ–º–æ–Ω—Ç–æ–º',
        type: 'APARTMENT',
        address: '—É–ª. –õ–µ–Ω–∏–Ω–∞, 1, –∫–≤. 5',
        price: 50000,
        bedrooms: 2,
        bathrooms: 1,
        area: 45.5,
        features: ['–ë–∞–ª–∫–æ–Ω', '–õ–æ–¥–∂–∏—è', '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä'],
        images: []
      }

      const property = await prisma.property.create({
        data: {
          ...propertyData,
          userId: user.id
        }
      })

      return { propertyId: property.id, title: property.title }
    })

    // –¢–µ—Å—Ç 5: –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ (100 –æ–±—ä–µ–∫—Ç–æ–≤)
    await this.testScenario('–°–æ–∑–¥–∞–Ω–∏–µ 100 –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', async () => {
      const user = this.testUsers[0]
      const startTime = Date.now()
      
      for (let i = 1; i <= 100; i++) {
        await prisma.property.create({
          data: {
            title: `–ö–≤–∞—Ä—Ç–∏—Ä–∞ ${i}`,
            description: `–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã ${i}`,
            type: 'APARTMENT',
            address: `—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, ${i}`,
            price: 30000 + (i * 1000),
            bedrooms: (i % 3) + 1,
            bathrooms: (i % 2) + 1,
            area: 30 + (i * 2),
            features: ['–ë–∞–∑–æ–≤—ã–µ —É–¥–æ–±—Å—Ç–≤–∞'],
            images: [],
            userId: user.id
          }
        })
      }

      const endTime = Date.now()
      const duration = endTime - startTime
      
      return { 
        count: 100, 
        duration: `${duration}ms`, 
        avgTime: `${duration / 100}ms per property` 
      }
    })

    // –¢–µ—Å—Ç 6: –ü–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
    await this.testScenario('–ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º', async () => {
      const user = this.testUsers[0]
      
      const apartments = await prisma.property.findMany({
        where: {
          userId: user.id,
          type: 'APARTMENT'
        }
      })

      const expensiveProperties = await prisma.property.findMany({
        where: {
          userId: user.id,
          price: {
            gte: 50000
          }
        }
      })

      return { 
        apartments: apartments.length, 
        expensive: expensiveProperties.length 
      }
    })
  }

  private async runClientTests() {
    console.log('\nüë• –¢–µ—Å—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤...')

    // –¢–µ—Å—Ç 7: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    await this.testScenario('–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞', async () => {
      const user = this.testUsers[0]
      const clientData = {
        firstName: '–ê–ª–µ–∫—Å–µ–π',
        lastName: '–ò–≤–∞–Ω–æ–≤',
        middleName: '–ü–µ—Ç—Ä–æ–≤–∏—á',
        email: 'alexey@test.com',
        phone: '+7 (999) 111-22-33',
        type: 'TENANT',
        passport: '1234 567890',
        snils: '123-456-789 01',
        inn: '123456789012',
        address: '—É–ª. –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è, 1',
        city: '–ú–æ—Å–∫–≤–∞',
        notes: '–•–æ—Ä–æ—à–∏–π –∫–ª–∏–µ–Ω—Ç',
        source: '–°–∞–π—Ç'
      }

      const client = await prisma.client.create({
        data: {
          ...clientData,
          userId: user.id
        }
      })

      return { clientId: client.id, name: `${client.firstName} ${client.lastName}` }
    })

    // –¢–µ—Å—Ç 8: –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
    await this.testScenario('–°–æ–∑–¥–∞–Ω–∏–µ 50 –∫–ª–∏–µ–Ω—Ç–æ–≤', async () => {
      const user = this.testUsers[0]
      const startTime = Date.now()
      
      for (let i = 1; i <= 50; i++) {
        await prisma.client.create({
          data: {
            firstName: `–ö–ª–∏–µ–Ω—Ç${i}`,
            lastName: `–§–∞–º–∏–ª–∏—è${i}`,
            phone: `+7 (999) ${String(i).padStart(3, '0')}-00-00`,
            userId: user.id
          }
        })
      }

      const endTime = Date.now()
      const duration = endTime - startTime
      
      return { 
        count: 50, 
        duration: `${duration}ms`, 
        avgTime: `${duration / 50}ms per client` 
      }
    })
  }

  private async runDealTests() {
    console.log('\nü§ù –¢–µ—Å—Ç—ã —Å–¥–µ–ª–æ–∫...')

    // –¢–µ—Å—Ç 9: –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    await this.testScenario('–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏', async () => {
      const user = this.testUsers[0]
      const client = await prisma.client.findFirst()
      const property = await prisma.property.findFirst()
      
      if (!client || !property) throw new Error('–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞')

      const dealData = {
        title: '–ê—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ —Ü–µ–Ω—Ç—Ä–µ',
        description: '–°–¥–µ–ª–∫–∞ –ø–æ –∞—Ä–µ–Ω–¥–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
        status: 'NEW',
        amount: 50000,
        startDate: new Date(),
        endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000),
        clientId: client.id,
        propertyId: property.id
      }

      const deal = await prisma.deal.create({
        data: {
          ...dealData,
          userId: user.id
        }
      })

      return { dealId: deal.id, title: deal.title, amount: deal.amount }
    })

    // –¢–µ—Å—Ç 10: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏
    await this.testScenario('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏', async () => {
      const deal = await prisma.deal.findFirst()
      if (!deal) throw new Error('–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

      const updatedDeal = await prisma.deal.update({
        where: { id: deal.id },
        data: { status: 'IN_PROGRESS' }
      })

      return { 
        oldStatus: deal.status, 
        newStatus: updatedDeal.status 
      }
    })
  }

  private async runSecurityTests() {
    console.log('\nüîí –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...')

    // –¢–µ—Å—Ç 11: –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–∏–º –¥–∞–Ω–Ω—ã–º
    await this.testScenario('–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–∏–º –¥–∞–Ω–Ω—ã–º', async () => {
      const user1 = this.testUsers[0]
      const user2 = this.testUsers[1]

      const property = await prisma.property.create({
        data: {
          title: '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç',
          type: 'APARTMENT',
          address: '—É–ª. –ü—Ä–∏–≤–∞—Ç–Ω–∞—è, 1',
          price: 100000,
          userId: user1.id
        }
      })

      const unauthorizedAccess = await prisma.property.findMany({
        where: {
          userId: user1.id
        }
      })

      return { 
        propertyId: property.id, 
        unauthorizedCount: unauthorizedAccess.length 
      }
    })

    // –¢–µ—Å—Ç 12: –í–∞–ª–∏–¥–∞—Ü–∏—è JWT
    await this.testScenario('–í–∞–ª–∏–¥–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞', async () => {
      const user = this.testUsers[0]
      
      const validToken = jwt.sign(
        { userId: user.id, email: user.email, role: user.role },
        JWT_SECRET,
        { expiresIn: '30d' }
      )

      const invalidToken = 'invalid.token.here'

      const validDecoded = jwt.verify(validToken, JWT_SECRET)
      
      let invalidDecoded = null
      try {
        invalidDecoded = jwt.verify(invalidToken, JWT_SECRET)
      } catch (error) {
        // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É
      }

      return { 
        validToken: !!validDecoded, 
        invalidToken: !invalidDecoded 
      }
    })
  }

  private async runEdgeCases() {
    console.log('\nüîç –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏...')

    // –¢–µ—Å—Ç 13: –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    await this.testScenario('–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è', async () => {
      const user = this.testUsers[0]
      const longTitle = 'A'.repeat(1000)
      
      try {
        const property = await prisma.property.create({
          data: {
            title: longTitle,
            type: 'APARTMENT',
            address: '—É–ª. –î–ª–∏–Ω–Ω–∞—è, 1',
            price: 100000,
            userId: user.id
          }
        })
        return { success: true, titleLength: property.title.length }
      } catch (error) {
        return { success: false, error: '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ' }
      }
    })

    // –¢–µ—Å—Ç 14: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
    await this.testScenario('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã', async () => {
      const user = this.testUsers[0]
      
      try {
        const property = await prisma.property.create({
          data: {
            title: '–û–±—ä–µ–∫—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π',
            type: 'APARTMENT',
            address: '—É–ª. –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è, 1',
            price: -1000,
            userId: user.id
          }
        })
        return { success: true, price: property.price }
      } catch (error) {
        return { success: false, error: '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞' }
      }
    })

    // –¢–µ—Å—Ç 15: XSS –ø–æ–ø—ã—Ç–∫–∞
    await this.testScenario('XSS –ø–æ–ø—ã—Ç–∫–∞', async () => {
      const user = this.testUsers[0]
      const xssTitle = '<script>alert("xss")</script>'
      
      try {
        const property = await prisma.property.create({
          data: {
            title: xssTitle,
            type: 'APARTMENT',
            address: '—É–ª. XSS, 1',
            price: 100000,
            userId: user.id
          }
        })
        return { success: true, title: property.title }
      } catch (error) {
        return { success: false, error: 'XSS –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' }
      }
    })
  }

  private async testScenario(name: string, testFn: () => Promise<any>): Promise<void> {
    try {
      console.log(`  üß™ ${name}...`)
      const result = await testFn()
      this.results.push({
        scenario: name,
        success: true,
        details: result
      })
      console.log(`  ‚úÖ ${name} - –£–°–ü–ï–•`)
    } catch (error: any) {
      this.results.push({
        scenario: name,
        success: false,
        error: error.message
      })
      console.log(`  ‚ùå ${name} - –û–®–ò–ë–ö–ê: ${error.message}`)
    }
  }

  private printResults() {
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø')
    console.log('=' .repeat(50))
    
    const successful = this.results.filter(r => r.success).length
    const failed = this.results.filter(r => !r.success).length
    const total = this.results.length
    
    console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${total}`)
    console.log(`–£—Å–ø–µ—à–Ω—ã—Ö: ${successful}`)
    console.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö: ${failed}`)
    console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((successful / total) * 100).toFixed(1)}%`)
    
    if (failed > 0) {
      console.log('\n‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:')
      this.results
        .filter(r => !r.success)
        .forEach(r => {
          console.log(`  - ${r.scenario}: ${r.error}`)
        })
    }
  }

  private async cleanup() {
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
    
    await prisma.deal.deleteMany({
      where: {
        user: {
          email: {
            contains: '@test.com'
          }
        }
      }
    })
    
    await prisma.client.deleteMany({
      where: {
        user: {
          email: {
            contains: '@test.com'
          }
        }
      }
    })
    
    await prisma.property.deleteMany({
      where: {
        user: {
          email: {
            contains: '@test.com'
          }
        }
      }
    })
    
    await prisma.user.deleteMany({
      where: {
        email: {
          contains: '@test.com'
        }
      }
    })
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã')
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const tester = new QuickTester()
tester.runTests() 