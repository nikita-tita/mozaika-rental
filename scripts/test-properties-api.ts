#!/usr/bin/env tsx

import { readFileSync } from 'fs'

interface TestCase {
  name: string
  data: any
  expectedSuccess: boolean
  expectedError?: string
}

async function testPropertiesAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...\n')

  // –ß–∏—Ç–∞–µ–º cookies –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  let cookies = ''
  try {
    cookies = readFileSync('test_cookies.txt', 'utf-8').trim()
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å cookies. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥.')
    return
  }

  const baseUrl = 'https://mozaikarentalstableversionv1.vercel.app'
  
  const testCases: TestCase[] = [
    {
      name: '–í–∞–ª–∏–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å price',
      data: {
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å price',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
        type: 'APARTMENT',
        address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1',
        price: 50000,
        bedrooms: 2,
        bathrooms: 1,
        area: 45.5,
        features: ['–ë–∞–ª–∫–æ–Ω', '–õ–∏—Ñ—Ç']
      },
      expectedSuccess: true
    },
    {
      name: '–í–∞–ª–∏–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å pricePerMonth',
      data: {
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å pricePerMonth',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
        type: 'APARTMENT',
        address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 2',
        pricePerMonth: 60000,
        bedrooms: 3,
        bathrooms: 2,
        area: 65.0,
        features: ['–ü–∞—Ä–∫–æ–≤–∫–∞', '–ö–æ–Ω—Å—å–µ—Ä–∂']
      },
      expectedSuccess: true
    },
    {
      name: '–û–±—ä–µ–∫—Ç –±–µ–∑ —Ü–µ–Ω—ã (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 0)',
      data: {
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –±–µ–∑ —Ü–µ–Ω—ã',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
        type: 'HOUSE',
        address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 3',
        bedrooms: 1,
        bathrooms: 1,
        area: 30.0
      },
      expectedSuccess: true
    },
    {
      name: '–û–±—ä–µ–∫—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π',
      data: {
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
        type: 'APARTMENT',
        address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 4',
        price: -1000,
        bedrooms: 2,
        bathrooms: 1,
        area: 50.0
      },
      expectedSuccess: false,
      expectedError: '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π'
    },
    {
      name: '–û–±—ä–µ–∫—Ç –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π',
      data: {
        description: '–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
        type: 'APARTMENT',
        price: 50000
      },
      expectedSuccess: false,
      expectedError: '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
    },
    {
      name: '–û–±—ä–µ–∫—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–∏–ø–æ–º',
      data: {
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–∏–ø–æ–º',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
        type: 'INVALID_TYPE',
        address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 5',
        price: 50000
      },
      expectedSuccess: false,
      expectedError: '–¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å APARTMENT, HOUSE, COMMERCIAL –∏–ª–∏ LAND'
    }
  ]

  let passedTests = 0
  let totalTests = testCases.length

  for (const testCase of testCases) {
    console.log(`üß™ –¢–µ—Å—Ç: ${testCase.name}`)
    
    try {
      const response = await fetch(`${baseUrl}/api/properties`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Cookie': cookies
        },
        body: JSON.stringify(testCase.data)
      })

      const result = await response.json()
      
      if (testCase.expectedSuccess) {
        if (result.success) {
          console.log(`  ‚úÖ –£–°–ü–ï–•: –û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID ${result.data?.id}`)
          passedTests++
        } else {
          console.log(`  ‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª—Å—è —É—Å–ø–µ—Ö, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É: ${result.error}`)
        }
      } else {
        if (!result.success && result.error) {
          if (testCase.expectedError && result.error.includes(testCase.expectedError)) {
            console.log(`  ‚úÖ –£–°–ü–ï–•: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${result.error}`)
            passedTests++
          } else {
            console.log(`  ‚úÖ –£–°–ü–ï–•: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞: ${result.error}`)
            passedTests++
          }
        } else {
          console.log(`  ‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —É—Å–ø–µ—Ö`)
        }
      }
    } catch (error) {
      console.log(`  ‚ùå –û–®–ò–ë–ö–ê: ${error}`)
    }
    
    console.log('')
  }

  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API –°–û–ó–î–ê–ù–ò–Ø –û–ë–™–ï–ö–¢–û–í')
  console.log('==================================================')
  console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`)
  console.log(`–£—Å–ø–µ—à–Ω—ã—Ö: ${passedTests}`)
  console.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö: ${totalTests - passedTests}`)
  console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((passedTests / totalTests) * 100).toFixed(1)}%`)

  if (passedTests === totalTests) {
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! API —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
  } else {
    console.log('\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å API —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤.')
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testPropertiesAPI().catch(console.error) 