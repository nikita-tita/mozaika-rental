#!/usr/bin/env tsx

import { PrismaClient } from '@prisma/client'
import bcryptjs from 'bcryptjs'

const prisma = new PrismaClient()

async function testAuthSystem() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...\n')

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
    await prisma.$connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ\n')

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
    const testUser = await prisma.user.findUnique({
      where: { email: 'nikitatitov070@gmail.com' }
    })

    if (!testUser) {
      console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      console.log('üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
      
      const hashedPassword = await bcryptjs.hash('password123', 12)
      
      const newUser = await prisma.user.create({
        data: {
          email: 'nikitatitov070@gmail.com',
          password: hashedPassword,
          firstName: '–ù–∏–∫–∏—Ç–∞',
          lastName: '–¢–∏—Ç–æ–≤',
          role: 'REALTOR',
          verified: true,
          phone: '+7 (999) 123-45-67'
        }
      })
      
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', newUser.email)
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', testUser.email)
    }
    console.log()

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏–∏
    console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–π...')
    const sessions = await prisma.session.findMany({
      include: { user: true }
    })
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: ${sessions.length}`)
    
    if (sessions.length > 0) {
      console.log('üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:')
      sessions.forEach((session, index) => {
        console.log(`   ${index + 1}. ${session.user.email} - ${session.expiresAt}`)
      })
    }
    console.log()

    // 4. –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
    console.log('4Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π...')
    const expiredSessions = await prisma.session.deleteMany({
      where: {
        expiresAt: {
          lt: new Date()
        }
      }
    })
    
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π: ${expiredSessions.count}`)
    console.log()

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
    console.log('5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π...')
    const testPassword = 'testpassword123'
    const hashedPassword = await bcryptjs.hash(testPassword, 12)
    const isValidPassword = await bcryptjs.compare(testPassword, hashedPassword)
    
    console.log(`üîë –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ${testPassword}`)
    console.log(`üîê –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: ${hashedPassword.substring(0, 20)}...`)
    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è: ${isValidPassword ? '—É—Å–ø–µ—à–Ω–æ' : '–Ω–µ—É–¥–∞—á–Ω–æ'}`)
    console.log()

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
    
    const userCount = await prisma.user.count()
    const clientCount = await prisma.client.count()
    const propertyCount = await prisma.property.count()
    const contractCount = await prisma.contract.count()
    const paymentCount = await prisma.payment.count()
    const notificationCount = await prisma.notification.count()
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:')
    console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${userCount}`)
    console.log(`   üë§ –ö–ª–∏–µ–Ω—Ç—ã: ${clientCount}`)
    console.log(`   üè† –û–±—ä–µ–∫—Ç—ã: ${propertyCount}`)
    console.log(`   üìÑ –î–æ–≥–æ–≤–æ—Ä—ã: ${contractCount}`)
    console.log(`   üí∞ –ü–ª–∞—Ç–µ–∂–∏: ${paymentCount}`)
    console.log(`   üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notificationCount}`)
    console.log()

    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –¥–∞–Ω–Ω—ã–º–∏
    console.log('7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –¥–∞–Ω–Ω—ã–º–∏...')
    
    const userWithClients = await prisma.user.findUnique({
      where: { email: 'nikitatitov070@gmail.com' },
      include: { clients: true }
    })
    
    if (userWithClients) {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userWithClients.email} –∏–º–µ–µ—Ç ${userWithClients.clients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤`)
      
      if (userWithClients.clients.length > 0) {
        console.log('üìã –ö–ª–∏–µ–Ω—Ç—ã:')
        userWithClients.clients.forEach((client, index) => {
          console.log(`   ${index + 1}. ${client.firstName} ${client.lastName} (${client.type})`)
        })
      }
    }
    console.log()

    // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    console.log('8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...')
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–≥–æ–≤–æ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const allContracts = await prisma.contract.findMany()
    
    const invalidContracts = allContracts.filter(contract => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –Ω–µ –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
      if (contract.signedAt && contract.expiresAt && contract.signedAt > contract.expiresAt) {
        return true
      }
      return false
    })
    
    if (invalidContracts.length > 0) {
      console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${invalidContracts.length} –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏`)
      invalidContracts.forEach((contract, index) => {
        console.log(`   ${index + 1}. ID: ${contract.id}`)
        if (contract.signedAt && contract.expiresAt && contract.signedAt > contract.expiresAt) {
          console.log(`      ‚ùå –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è (${contract.signedAt}) > –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (${contract.expiresAt})`)
        }
      })
    } else {
      console.log('‚úÖ –í—Å–µ –¥–æ–≥–æ–≤–æ—Ä—ã –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
    }
    console.log()

    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
    console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:')
    console.log('   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ JWT_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cookies –≤ production')
    console.log('   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—á–∏—â–∞–π—Ç–µ –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏')
    console.log('   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testAuthSystem()
  .then(() => {
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error)
    process.exit(1)
  }) 