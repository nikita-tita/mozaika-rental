import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function clearTestUsers() {
  try {
    console.log('üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const deletedUsers = await prisma.user.deleteMany({})
    
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${deletedUsers.count}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –ø—É—Å—Ç–∞—è
    const remainingUsers = await prisma.user.findMany()
    console.log(`üìä –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${remainingUsers.length}`)
    
    if (remainingUsers.length === 0) {
      console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!')
    } else {
      console.log('‚ö†Ô∏è –í –±–∞–∑–µ –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', remainingUsers.map(u => u.email))
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error)
  } finally {
    await prisma.$disconnect()
  }
}

clearTestUsers() 